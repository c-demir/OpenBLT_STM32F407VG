
my_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004928  08004928  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004928  08004928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004930  08004930  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000006e4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006f0  200006f0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b132  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c7e  00000000  00000000  0002b1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d90  00000000  00000000  0002de30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009ff  00000000  00000000  0002ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021e99  00000000  00000000  0002f5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f876  00000000  00000000  00051458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c7c95  00000000  00000000  00060cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003214  00000000  00000000  00128964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0012bb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004820 	.word	0x08004820

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004820 	.word	0x08004820

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* initialize the bootloader */
  BootInit();
 80004c8:	f003 fa5a 	bl	8003980 <BootInit>
} /*** end of AppInit ***/
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <AppTask>:
**            in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Run the bootloader task. */
  BootTask();
 80004d4:	f003 fa64 	bl	80039a0 <BootTask>
} /*** end of AppTask ***/
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	691a      	ldr	r2, [r3, #16]
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	4013      	ands	r3, r2
 80004ee:	683a      	ldr	r2, [r7, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	bf0c      	ite	eq
 80004f4:	2301      	moveq	r3, #1
 80004f6:	2300      	movne	r3, #0
 80004f8:	b2db      	uxtb	r3, r3
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep it pressed during reset.
   */
  if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0) != 0)
 800050c:	2101      	movs	r1, #1
 800050e:	4806      	ldr	r0, [pc, #24]	; (8000528 <CpuUserProgramStartHook+0x20>)
 8000510:	f7ff ffe4 	bl	80004dc <LL_GPIO_IsInputPinSet>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <CpuUserProgramStartHook+0x16>
  {
    /* pushbutton pressed, so do not start the user program and keep the
     * bootloader active instead.
     */
    return BLT_FALSE;
 800051a:	2300      	movs	r3, #0
 800051c:	e002      	b.n	8000524 <CpuUserProgramStartHook+0x1c>
  }

  /* clean up the LED driver */
  LedBlinkExit();
 800051e:	f000 f89d 	bl	800065c <LedBlinkExit>

  /* okay to start the user program */
  return BLT_TRUE;
 8000522:	2301      	movs	r3, #1
} /*** end of CpuUserProgramStartHook ***/
 8000524:	4618      	mov	r0, r3
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40020000 	.word	0x40020000

0800052c <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 8000530:	2064      	movs	r0, #100	; 0x64
 8000532:	f000 f853 	bl	80005dc <LedBlinkInit>
} /*** end of CopInitHook ***/
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}

0800053a <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 800053e:	f000 f85d 	bl	80005fc <LedBlinkTask>
} /*** end of CopServiceHook ***/
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}

08000546 <XcpGetSeedHook>:
** \param     seed      Pointer to byte buffer wher the seed will be stored.
** \return    Length of the seed in bytes.
**
****************************************************************************************/
blt_int8u XcpGetSeedHook(blt_int8u resource, blt_int8u *seed)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	4603      	mov	r3, r0
 800054e:	6039      	str	r1, [r7, #0]
 8000550:	71fb      	strb	r3, [r7, #7]
  /* request seed for unlocking ProGraMming resource */
  if ((resource & XCP_RES_PGM) != 0)
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 0310 	and.w	r3, r3, #16
 8000558:	2b00      	cmp	r3, #0
 800055a:	d002      	beq.n	8000562 <XcpGetSeedHook+0x1c>
  {
    seed[0] = 0x55;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	2255      	movs	r2, #85	; 0x55
 8000560:	701a      	strb	r2, [r3, #0]

  }

  /* return seed length */
  return 1;
 8000562:	2301      	movs	r3, #1
} /*** end of XcpGetSeedHook ***/
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <XcpVerifyKeyHook>:
** \param     len       length of the key in bytes.
** \return    1 if the key was correct, 0 otherwise.
**
****************************************************************************************/
blt_int8u XcpVerifyKeyHook(blt_int8u resource, blt_int8u *key, blt_int8u len)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
  /* the example key algorithm in "libseednkey.dll" works as follows:
   *  - PGM will be unlocked if key = seed + 1
   */

  /* check key for unlocking ProGraMming resource */
  if ((resource == XCP_RES_PGM) && (key[0] == (0x55+1)))
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	2b10      	cmp	r3, #16
 8000584:	d105      	bne.n	8000592 <XcpVerifyKeyHook+0x22>
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b56      	cmp	r3, #86	; 0x56
 800058c:	d101      	bne.n	8000592 <XcpVerifyKeyHook+0x22>
  {
    /* correct key received for unlocking PGM resource */
    return 1;
 800058e:	2301      	movs	r3, #1
 8000590:	e000      	b.n	8000594 <XcpVerifyKeyHook+0x24>
  }

  /* still here so key incorrect */
  return 0;
 8000592:	2300      	movs	r3, #0
} /*** end of XcpVerifyKeyHook ***/
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	619a      	str	r2, [r3, #24]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	041a      	lsls	r2, r3, #16
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	619a      	str	r2, [r3, #24]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <LedBlinkInit>:
** \param     interval_ms Specifies the desired LED blink interval time in milliseconds.
** \return    none.
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <LedBlinkInit+0x1c>)
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	8013      	strh	r3, [r2, #0]
} /*** end of LedBlinkInit ***/
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	20000028 	.word	0x20000028

080005fc <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 8000600:	f003 f95e 	bl	80038c0 <TimerGet>
 8000604:	4602      	mov	r2, r0
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <LedBlinkTask+0x50>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	d31c      	bcc.n	8000648 <LedBlinkTask+0x4c>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <LedBlinkTask+0x54>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d108      	bne.n	8000628 <LedBlinkTask+0x2c>
    {
      ledOn = BLT_TRUE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <LedBlinkTask+0x54>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
      LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12);
 800061c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LedBlinkTask+0x58>)
 8000622:	f7ff ffcb 	bl	80005bc <LL_GPIO_ResetOutputPin>
 8000626:	e007      	b.n	8000638 <LedBlinkTask+0x3c>
    }
    else
    {
      ledOn = BLT_FALSE;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <LedBlinkTask+0x54>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
      LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_12);
 800062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <LedBlinkTask+0x58>)
 8000634:	f7ff ffb4 	bl	80005a0 <LL_GPIO_SetOutputPin>
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 8000638:	f003 f942 	bl	80038c0 <TimerGet>
 800063c:	4603      	mov	r3, r0
 800063e:	4a06      	ldr	r2, [pc, #24]	; (8000658 <LedBlinkTask+0x5c>)
 8000640:	8812      	ldrh	r2, [r2, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a01      	ldr	r2, [pc, #4]	; (800064c <LedBlinkTask+0x50>)
 8000646:	6013      	str	r3, [r2, #0]
  }
} /*** end of LedBlinkTask ***/
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000002c 	.word	0x2000002c
 8000650:	20000030 	.word	0x20000030
 8000654:	40020c00 	.word	0x40020c00
 8000658:	20000028 	.word	0x20000028

0800065c <LedBlinkExit>:
**            exit.
** \return    none.
**
****************************************************************************************/
void LedBlinkExit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* turn the LED off */
  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_12);
 8000660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <LedBlinkExit+0x14>)
 8000666:	f7ff ff9b 	bl	80005a0 <LL_GPIO_SetOutputPin>
} /*** end of LedBlinkExit ***/
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020c00 	.word	0x40020c00

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 f9dc 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f80a 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f000 f89c 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000684:	f000 f870 	bl	8000768 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  AppInit();
 8000688:	f7ff ff1c 	bl	80004c4 <AppInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

   AppTask();
 800068c:	f7ff ff20 	bl	80004d0 <AppTask>
 8000690:	e7fc      	b.n	800068c <main+0x18>
	...

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 f890 	bl	80047c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000704:	2308      	movs	r3, #8
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000708:	23a8      	movs	r3, #168	; 0xa8
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000710:	2307      	movs	r3, #7
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4618      	mov	r0, r3
 800071a:	f000 ff9b 	bl	8001654 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000724:	f000 f8aa 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000734:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2105      	movs	r1, #5
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f9fc 	bl	8001b44 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000752:	f000 f893 	bl	800087c <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f001 fbf0 	bl	8001f84 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f867 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000034 	.word	0x20000034
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b26      	ldr	r3, [pc, #152]	; (8000870 <MX_GPIO_Init+0xb4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a25      	ldr	r2, [pc, #148]	; (8000870 <MX_GPIO_Init+0xb4>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <MX_GPIO_Init+0xb4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_GPIO_Init+0xb4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <MX_GPIO_Init+0xb4>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_GPIO_Init+0xb4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_GPIO_Init+0xb4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <MX_GPIO_Init+0xb4>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_GPIO_Init+0xb4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800082c:	4811      	ldr	r0, [pc, #68]	; (8000874 <MX_GPIO_Init+0xb8>)
 800082e:	f000 fef7 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000832:	2301      	movs	r3, #1
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_GPIO_Init+0xbc>)
 8000846:	f000 fd4f 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800084a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_GPIO_Init+0xb8>)
 8000864:	f000 fd40 	bl	80012e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40020c00 	.word	0x40020c00
 8000878:	40020000 	.word	0x40020000

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <HAL_MspInit+0x4c>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008c6:	2007      	movs	r0, #7
 80008c8:	f000 fa02 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a19      	ldr	r2, [pc, #100]	; (800095c <HAL_UART_MspInit+0x84>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d12b      	bne.n	8000952 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <HAL_UART_MspInit+0x88>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <HAL_UART_MspInit+0x88>)
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_UART_MspInit+0x88>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_UART_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a10      	ldr	r2, [pc, #64]	; (8000960 <HAL_UART_MspInit+0x88>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_UART_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000932:	230c      	movs	r3, #12
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000942:	2307      	movs	r3, #7
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <HAL_UART_MspInit+0x8c>)
 800094e:	f000 fccb 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40004400 	.word	0x40004400
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	e7fe      	b.n	800096c <NMI_Handler+0x4>

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f8c6 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009e4:	f7ff ffea 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	; (8000a2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f003 fee3 	bl	80047d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a12:	f7ff fe2f 	bl	8000674 <main>
  bx  lr    
 8000a16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a24:	08004938 	.word	0x08004938
  ldr r2, =_sbss
 8000a28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a2c:	200006f0 	.word	0x200006f0

08000a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <HAL_Init+0x40>)
 8000a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_Init+0x40>)
 8000a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x40>)
 8000a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f937 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f83e 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff ff0e 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023c00 	.word	0x40023c00

08000a78 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_DeInit+0x4c>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <HAL_DeInit+0x50>)
 8000a80:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_DeInit+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_DeInit+0x4c>)
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_DeInit+0x54>)
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_DeInit+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_DeInit+0x4c>)
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_DeInit+0x58>)
 8000a98:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_DeInit+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_DeInit+0x4c>)
 8000aa2:	22c1      	movs	r2, #193	; 0xc1
 8000aa4:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <HAL_DeInit+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_DeInit+0x4c>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <HAL_DeInit+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000ab8:	f000 f80c 	bl	8000ad4 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	f6fec9ff 	.word	0xf6fec9ff
 8000acc:	04777933 	.word	0x04777933
 8000ad0:	226011ff 	.word	0x226011ff

08000ad4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x54>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x58>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f90b 	bl	8000d1e <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00e      	b.n	8000b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d80a      	bhi.n	8000b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f000 f8e1 	bl	8000ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <HAL_InitTick+0x5c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x20>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_IncTick+0x24>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	2000007c 	.word	0x2000007c

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff47 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff5c 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff8e 	bl	8000c24 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffb0 	bl	8000c8c <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d4a:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <HAL_FLASH_Program+0xa0>)
 8000d4c:	7e1b      	ldrb	r3, [r3, #24]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d101      	bne.n	8000d56 <HAL_FLASH_Program+0x1e>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e03b      	b.n	8000dce <HAL_FLASH_Program+0x96>
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <HAL_FLASH_Program+0xa0>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d60:	f000 f870 	bl	8000e44 <FLASH_WaitForLastOperation>
 8000d64:	4603      	mov	r3, r0
 8000d66:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d12b      	bne.n	8000dc6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d105      	bne.n	8000d80 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000d74:	783b      	ldrb	r3, [r7, #0]
 8000d76:	4619      	mov	r1, r3
 8000d78:	68b8      	ldr	r0, [r7, #8]
 8000d7a:	f000 f91b 	bl	8000fb4 <FLASH_Program_Byte>
 8000d7e:	e016      	b.n	8000dae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d105      	bne.n	8000d92 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000d86:	883b      	ldrh	r3, [r7, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	68b8      	ldr	r0, [r7, #8]
 8000d8c:	f000 f8ee 	bl	8000f6c <FLASH_Program_HalfWord>
 8000d90:	e00d      	b.n	8000dae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d105      	bne.n	8000da4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	68b8      	ldr	r0, [r7, #8]
 8000d9e:	f000 f8c3 	bl	8000f28 <FLASH_Program_Word>
 8000da2:	e004      	b.n	8000dae <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000da8:	68b8      	ldr	r0, [r7, #8]
 8000daa:	f000 f88b 	bl	8000ec4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000dae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000db2:	f000 f847 	bl	8000e44 <FLASH_WaitForLastOperation>
 8000db6:	4603      	mov	r3, r0
 8000db8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_FLASH_Program+0xa4>)
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_FLASH_Program+0xa4>)
 8000dc0:	f023 0301 	bic.w	r3, r3, #1
 8000dc4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <HAL_FLASH_Program+0xa0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000080 	.word	0x20000080
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_FLASH_Unlock+0x38>)
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	da0b      	bge.n	8000e0a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_FLASH_Unlock+0x38>)
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_FLASH_Unlock+0x3c>)
 8000df6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <HAL_FLASH_Unlock+0x38>)
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <HAL_FLASH_Unlock+0x40>)
 8000dfc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_FLASH_Unlock+0x38>)
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	da01      	bge.n	8000e0a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	40023c00 	.word	0x40023c00
 8000e1c:	45670123 	.word	0x45670123
 8000e20:	cdef89ab 	.word	0xcdef89ab

08000e24 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_FLASH_Lock+0x1c>)
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_FLASH_Lock+0x1c>)
 8000e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e32:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <FLASH_WaitForLastOperation+0x78>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e56:	f002 fd3d 	bl	80038d4 <HAL_GetTick>
 8000e5a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000e5c:	e010      	b.n	8000e80 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e64:	d00c      	beq.n	8000e80 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d007      	beq.n	8000e7c <FLASH_WaitForLastOperation+0x38>
 8000e6c:	f002 fd32 	bl	80038d4 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d201      	bcs.n	8000e80 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e019      	b.n	8000eb4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <FLASH_WaitForLastOperation+0x7c>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1e8      	bne.n	8000e5e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <FLASH_WaitForLastOperation+0x7c>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <FLASH_WaitForLastOperation+0x7c>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <FLASH_WaitForLastOperation+0x7c>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000eaa:	f000 f8a5 	bl	8000ff8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
  
}  
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000080 	.word	0x20000080
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <FLASH_Program_DoubleWord+0x60>)
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <FLASH_Program_DoubleWord+0x60>)
 8000ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000eda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <FLASH_Program_DoubleWord+0x60>)
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <FLASH_Program_DoubleWord+0x60>)
 8000ee2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000ee6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <FLASH_Program_DoubleWord+0x60>)
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <FLASH_Program_DoubleWord+0x60>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8000efa:	f3bf 8f6f 	isb	sy
}
 8000efe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000f00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	000a      	movs	r2, r1
 8000f0e:	2300      	movs	r3, #0
 8000f10:	68f9      	ldr	r1, [r7, #12]
 8000f12:	3104      	adds	r1, #4
 8000f14:	4613      	mov	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <FLASH_Program_Word+0x40>)
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <FLASH_Program_Word+0x40>)
 8000f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <FLASH_Program_Word+0x40>)
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <FLASH_Program_Word+0x40>)
 8000f44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <FLASH_Program_Word+0x40>)
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <FLASH_Program_Word+0x40>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <FLASH_Program_HalfWord+0x44>)
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <FLASH_Program_HalfWord+0x44>)
 8000f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <FLASH_Program_HalfWord+0x44>)
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <FLASH_Program_HalfWord+0x44>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <FLASH_Program_HalfWord+0x44>)
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <FLASH_Program_HalfWord+0x44>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	801a      	strh	r2, [r3, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023c00 	.word	0x40023c00

08000fb4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <FLASH_Program_Byte+0x40>)
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <FLASH_Program_Byte+0x40>)
 8000fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <FLASH_Program_Byte+0x40>)
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <FLASH_Program_Byte+0x40>)
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <FLASH_Program_Byte+0x40>)
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <FLASH_Program_Byte+0x40>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	701a      	strb	r2, [r3, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023c00 	.word	0x40023c00

08000ff8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <FLASH_SetErrorCode+0xa4>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	2b00      	cmp	r3, #0
 8001006:	d008      	beq.n	800101a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <FLASH_SetErrorCode+0xa8>)
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	f043 0310 	orr.w	r3, r3, #16
 8001010:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <FLASH_SetErrorCode+0xa8>)
 8001012:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <FLASH_SetErrorCode+0xa4>)
 8001016:	2210      	movs	r2, #16
 8001018:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <FLASH_SetErrorCode+0xa4>)
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	f003 0320 	and.w	r3, r3, #32
 8001022:	2b00      	cmp	r3, #0
 8001024:	d008      	beq.n	8001038 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <FLASH_SetErrorCode+0xa8>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <FLASH_SetErrorCode+0xa8>)
 8001030:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <FLASH_SetErrorCode+0xa4>)
 8001034:	2220      	movs	r2, #32
 8001036:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <FLASH_SetErrorCode+0xa4>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001040:	2b00      	cmp	r3, #0
 8001042:	d008      	beq.n	8001056 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <FLASH_SetErrorCode+0xa8>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <FLASH_SetErrorCode+0xa8>)
 800104e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <FLASH_SetErrorCode+0xa4>)
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <FLASH_SetErrorCode+0xa4>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	2b00      	cmp	r3, #0
 8001060:	d008      	beq.n	8001074 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <FLASH_SetErrorCode+0xa8>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <FLASH_SetErrorCode+0xa8>)
 800106c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <FLASH_SetErrorCode+0xa4>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <FLASH_SetErrorCode+0xa4>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <FLASH_SetErrorCode+0xa8>)
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <FLASH_SetErrorCode+0xa8>)
 800108a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <FLASH_SetErrorCode+0xa4>)
 800108e:	2202      	movs	r2, #2
 8001090:	60da      	str	r2, [r3, #12]
  }
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	40023c00 	.word	0x40023c00
 80010a0:	20000080 	.word	0x20000080

080010a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010b6:	4b31      	ldr	r3, [pc, #196]	; (800117c <HAL_FLASHEx_Erase+0xd8>)
 80010b8:	7e1b      	ldrb	r3, [r3, #24]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <HAL_FLASHEx_Erase+0x1e>
 80010be:	2302      	movs	r3, #2
 80010c0:	e058      	b.n	8001174 <HAL_FLASHEx_Erase+0xd0>
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_FLASHEx_Erase+0xd8>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010cc:	f7ff feba 	bl	8000e44 <FLASH_WaitForLastOperation>
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d148      	bne.n	800116c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d115      	bne.n	8001116 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4610      	mov	r0, r2
 80010f8:	f000 f844 	bl	8001184 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001100:	f7ff fea0 	bl	8000e44 <FLASH_WaitForLastOperation>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_FLASHEx_Erase+0xdc>)
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <HAL_FLASHEx_Erase+0xdc>)
 800110e:	f023 0304 	bic.w	r3, r3, #4
 8001112:	6113      	str	r3, [r2, #16]
 8001114:	e028      	b.n	8001168 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	e01c      	b.n	8001158 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	f000 f850 	bl	80011cc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800112c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001130:	f7ff fe88 	bl	8000e44 <FLASH_WaitForLastOperation>
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_FLASHEx_Erase+0xdc>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	4a10      	ldr	r2, [pc, #64]	; (8001180 <HAL_FLASHEx_Erase+0xdc>)
 800113e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001142:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	601a      	str	r2, [r3, #0]
          break;
 8001150:	e00a      	b.n	8001168 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	3301      	adds	r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4413      	add	r3, r2
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	429a      	cmp	r2, r3
 8001166:	d3da      	bcc.n	800111e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001168:	f000 f878 	bl	800125c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_FLASHEx_Erase+0xd8>)
 800116e:	2200      	movs	r2, #0
 8001170:	761a      	strb	r2, [r3, #24]

  return status;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000080 	.word	0x20000080
 8001180:	40023c00 	.word	0x40023c00

08001184 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <FLASH_MassErase+0x44>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <FLASH_MassErase+0x44>)
 8001196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800119a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <FLASH_MassErase+0x44>)
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <FLASH_MassErase+0x44>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <FLASH_MassErase+0x44>)
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	4313      	orrs	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <FLASH_MassErase+0x44>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6113      	str	r3, [r2, #16]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00

080011cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	e010      	b.n	800120a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d103      	bne.n	80011f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80011ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e009      	b.n	800120a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d103      	bne.n	8001204 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80011fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	e002      	b.n	800120a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001204:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001208:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <FLASH_Erase_Sector+0x8c>)
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <FLASH_Erase_Sector+0x8c>)
 8001210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001214:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <FLASH_Erase_Sector+0x8c>)
 8001218:	691a      	ldr	r2, [r3, #16]
 800121a:	490f      	ldr	r1, [pc, #60]	; (8001258 <FLASH_Erase_Sector+0x8c>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <FLASH_Erase_Sector+0x8c>)
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <FLASH_Erase_Sector+0x8c>)
 8001228:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800122c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <FLASH_Erase_Sector+0x8c>)
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4313      	orrs	r3, r2
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <FLASH_Erase_Sector+0x8c>)
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <FLASH_Erase_Sector+0x8c>)
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <FLASH_Erase_Sector+0x8c>)
 8001246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124a:	6113      	str	r3, [r2, #16]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40023c00 	.word	0x40023c00

0800125c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <FLASH_FlushCaches+0x88>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001268:	2b00      	cmp	r3, #0
 800126a:	d017      	beq.n	800129c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <FLASH_FlushCaches+0x88>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <FLASH_FlushCaches+0x88>)
 8001272:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001276:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <FLASH_FlushCaches+0x88>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <FLASH_FlushCaches+0x88>)
 800127e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <FLASH_FlushCaches+0x88>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <FLASH_FlushCaches+0x88>)
 800128a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800128e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <FLASH_FlushCaches+0x88>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <FLASH_FlushCaches+0x88>)
 8001296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <FLASH_FlushCaches+0x88>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d017      	beq.n	80012d8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <FLASH_FlushCaches+0x88>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <FLASH_FlushCaches+0x88>)
 80012ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <FLASH_FlushCaches+0x88>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <FLASH_FlushCaches+0x88>)
 80012ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <FLASH_FlushCaches+0x88>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <FLASH_FlushCaches+0x88>)
 80012c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <FLASH_FlushCaches+0x88>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <FLASH_FlushCaches+0x88>)
 80012d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d6:	6013      	str	r3, [r2, #0]
  }
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	e16b      	b.n	80015dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 815a 	bne.w	80015d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d005      	beq.n	800133a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001336:	2b02      	cmp	r3, #2
 8001338:	d130      	bne.n	800139c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 0201 	and.w	r2, r3, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d017      	beq.n	80013d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d123      	bne.n	800142c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0203 	and.w	r2, r3, #3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80b4 	beq.w	80015d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b60      	ldr	r3, [pc, #384]	; (80015f4 <HAL_GPIO_Init+0x30c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a5f      	ldr	r2, [pc, #380]	; (80015f4 <HAL_GPIO_Init+0x30c>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <HAL_GPIO_Init+0x30c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148a:	4a5b      	ldr	r2, [pc, #364]	; (80015f8 <HAL_GPIO_Init+0x310>)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a52      	ldr	r2, [pc, #328]	; (80015fc <HAL_GPIO_Init+0x314>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d02b      	beq.n	800150e <HAL_GPIO_Init+0x226>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a51      	ldr	r2, [pc, #324]	; (8001600 <HAL_GPIO_Init+0x318>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d025      	beq.n	800150a <HAL_GPIO_Init+0x222>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a50      	ldr	r2, [pc, #320]	; (8001604 <HAL_GPIO_Init+0x31c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01f      	beq.n	8001506 <HAL_GPIO_Init+0x21e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4f      	ldr	r2, [pc, #316]	; (8001608 <HAL_GPIO_Init+0x320>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0x21a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4e      	ldr	r2, [pc, #312]	; (800160c <HAL_GPIO_Init+0x324>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0x216>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4d      	ldr	r2, [pc, #308]	; (8001610 <HAL_GPIO_Init+0x328>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_GPIO_Init+0x212>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_GPIO_Init+0x32c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x20e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4b      	ldr	r2, [pc, #300]	; (8001618 <HAL_GPIO_Init+0x330>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_Init+0x20a>
 80014ee:	2307      	movs	r3, #7
 80014f0:	e00e      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014f2:	2308      	movs	r3, #8
 80014f4:	e00c      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014f6:	2306      	movs	r3, #6
 80014f8:	e00a      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014fa:	2305      	movs	r3, #5
 80014fc:	e008      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014fe:	2304      	movs	r3, #4
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x228>
 8001502:	2303      	movs	r3, #3
 8001504:	e004      	b.n	8001510 <HAL_GPIO_Init+0x228>
 8001506:	2302      	movs	r3, #2
 8001508:	e002      	b.n	8001510 <HAL_GPIO_Init+0x228>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x228>
 800150e:	2300      	movs	r3, #0
 8001510:	69fa      	ldr	r2, [r7, #28]
 8001512:	f002 0203 	and.w	r2, r2, #3
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	4093      	lsls	r3, r2
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001520:	4935      	ldr	r1, [pc, #212]	; (80015f8 <HAL_GPIO_Init+0x310>)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152e:	4b3b      	ldr	r3, [pc, #236]	; (800161c <HAL_GPIO_Init+0x334>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001552:	4a32      	ldr	r2, [pc, #200]	; (800161c <HAL_GPIO_Init+0x334>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_GPIO_Init+0x334>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800157c:	4a27      	ldr	r2, [pc, #156]	; (800161c <HAL_GPIO_Init+0x334>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_GPIO_Init+0x334>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a6:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_GPIO_Init+0x334>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <HAL_GPIO_Init+0x334>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d0:	4a12      	ldr	r2, [pc, #72]	; (800161c <HAL_GPIO_Init+0x334>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3301      	adds	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	f67f ae90 	bls.w	8001304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40013800 	.word	0x40013800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400
 8001604:	40020800 	.word	0x40020800
 8001608:	40020c00 	.word	0x40020c00
 800160c:	40021000 	.word	0x40021000
 8001610:	40021400 	.word	0x40021400
 8001614:	40021800 	.word	0x40021800
 8001618:	40021c00 	.word	0x40021c00
 800161c:	40013c00 	.word	0x40013c00

08001620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800163c:	e003      	b.n	8001646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e267      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d075      	beq.n	800175e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001672:	4b88      	ldr	r3, [pc, #544]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b04      	cmp	r3, #4
 800167c:	d00c      	beq.n	8001698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167e:	4b85      	ldr	r3, [pc, #532]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001686:	2b08      	cmp	r3, #8
 8001688:	d112      	bne.n	80016b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168a:	4b82      	ldr	r3, [pc, #520]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001696:	d10b      	bne.n	80016b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	4b7e      	ldr	r3, [pc, #504]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d05b      	beq.n	800175c <HAL_RCC_OscConfig+0x108>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d157      	bne.n	800175c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e242      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b8:	d106      	bne.n	80016c8 <HAL_RCC_OscConfig+0x74>
 80016ba:	4b76      	ldr	r3, [pc, #472]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a75      	ldr	r2, [pc, #468]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e01d      	b.n	8001704 <HAL_RCC_OscConfig+0xb0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x98>
 80016d2:	4b70      	ldr	r3, [pc, #448]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a6f      	ldr	r2, [pc, #444]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b6d      	ldr	r3, [pc, #436]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a6c      	ldr	r2, [pc, #432]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0xb0>
 80016ec:	4b69      	ldr	r3, [pc, #420]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a68      	ldr	r2, [pc, #416]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b66      	ldr	r3, [pc, #408]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a65      	ldr	r2, [pc, #404]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f002 f8e2 	bl	80038d4 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001714:	f002 f8de 	bl	80038d4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e207      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0xc0>
 8001732:	e014      	b.n	800175e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f002 f8ce 	bl	80038d4 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800173c:	f002 f8ca 	bl	80038d4 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e1f3      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	4b51      	ldr	r3, [pc, #324]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0xe8>
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d063      	beq.n	8001832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800176a:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800177e:	2b08      	cmp	r3, #8
 8001780:	d11c      	bne.n	80017bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001782:	4b44      	ldr	r3, [pc, #272]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d116      	bne.n	80017bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x152>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e1c7      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4937      	ldr	r1, [pc, #220]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	e03a      	b.n	8001832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c4:	4b34      	ldr	r3, [pc, #208]	; (8001898 <HAL_RCC_OscConfig+0x244>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f002 f883 	bl	80038d4 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d2:	f002 f87f 	bl	80038d4 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1a8      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b28      	ldr	r3, [pc, #160]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4925      	ldr	r1, [pc, #148]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
 8001804:	e015      	b.n	8001832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_RCC_OscConfig+0x244>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f002 f862 	bl	80038d4 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001814:	f002 f85e 	bl	80038d4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e187      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d036      	beq.n	80018ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d016      	beq.n	8001874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_RCC_OscConfig+0x248>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f002 f842 	bl	80038d4 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001854:	f002 f83e 	bl	80038d4 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e167      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x200>
 8001872:	e01b      	b.n	80018ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_OscConfig+0x248>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f002 f82b 	bl	80038d4 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001880:	e00e      	b.n	80018a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001882:	f002 f827 	bl	80038d4 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d907      	bls.n	80018a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e150      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
 8001894:	40023800 	.word	0x40023800
 8001898:	42470000 	.word	0x42470000
 800189c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	4b88      	ldr	r3, [pc, #544]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1ea      	bne.n	8001882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8097 	beq.w	80019e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b81      	ldr	r3, [pc, #516]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b7d      	ldr	r3, [pc, #500]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a7c      	ldr	r2, [pc, #496]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b7a      	ldr	r3, [pc, #488]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e6:	2301      	movs	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b77      	ldr	r3, [pc, #476]	; (8001ac8 <HAL_RCC_OscConfig+0x474>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d118      	bne.n	8001928 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f6:	4b74      	ldr	r3, [pc, #464]	; (8001ac8 <HAL_RCC_OscConfig+0x474>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a73      	ldr	r2, [pc, #460]	; (8001ac8 <HAL_RCC_OscConfig+0x474>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001902:	f001 ffe7 	bl	80038d4 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190a:	f001 ffe3 	bl	80038d4 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e10c      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <HAL_RCC_OscConfig+0x474>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x2ea>
 8001930:	4b64      	ldr	r3, [pc, #400]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	4a63      	ldr	r2, [pc, #396]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6713      	str	r3, [r2, #112]	; 0x70
 800193c:	e01c      	b.n	8001978 <HAL_RCC_OscConfig+0x324>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x30c>
 8001946:	4b5f      	ldr	r3, [pc, #380]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194a:	4a5e      	ldr	r2, [pc, #376]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6713      	str	r3, [r2, #112]	; 0x70
 8001952:	4b5c      	ldr	r3, [pc, #368]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a5b      	ldr	r2, [pc, #364]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0x324>
 8001960:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	4a57      	ldr	r2, [pc, #348]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	6713      	str	r3, [r2, #112]	; 0x70
 800196c:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	4a54      	ldr	r2, [pc, #336]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001972:	f023 0304 	bic.w	r3, r3, #4
 8001976:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d015      	beq.n	80019ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f001 ffa8 	bl	80038d4 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001986:	e00a      	b.n	800199e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001988:	f001 ffa4 	bl	80038d4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	; 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0cb      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199e:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0ee      	beq.n	8001988 <HAL_RCC_OscConfig+0x334>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ac:	f001 ff92 	bl	80038d4 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f001 ff8e 	bl	80038d4 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e0b5      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ca:	4b3e      	ldr	r3, [pc, #248]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1ee      	bne.n	80019b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	4a38      	ldr	r2, [pc, #224]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80a1 	beq.w	8001b34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f2:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d05c      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d141      	bne.n	8001a8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b31      	ldr	r3, [pc, #196]	; (8001acc <HAL_RCC_OscConfig+0x478>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f001 ff62 	bl	80038d4 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a14:	f001 ff5e 	bl	80038d4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e087      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69da      	ldr	r2, [r3, #28]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	061b      	lsls	r3, r3, #24
 8001a56:	491b      	ldr	r1, [pc, #108]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_RCC_OscConfig+0x478>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f001 ff37 	bl	80038d4 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6a:	f001 ff33 	bl	80038d4 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e05c      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x416>
 8001a88:	e054      	b.n	8001b34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_RCC_OscConfig+0x478>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f001 ff20 	bl	80038d4 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a98:	f001 ff1c 	bl	80038d4 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e045      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x444>
 8001ab6:	e03d      	b.n	8001b34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e038      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40007000 	.word	0x40007000
 8001acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_RCC_OscConfig+0x4ec>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d028      	beq.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d121      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d11a      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b00:	4013      	ands	r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d111      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0cc      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d90c      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b65      	ldr	r3, [pc, #404]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b63      	ldr	r3, [pc, #396]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0b8      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d020      	beq.n	8001bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b98:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a58      	ldr	r2, [pc, #352]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a52      	ldr	r2, [pc, #328]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbc:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	494d      	ldr	r1, [pc, #308]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d044      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d119      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e07f      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d003      	beq.n	8001c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c02:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e06f      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e067      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c22:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f023 0203 	bic.w	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4934      	ldr	r1, [pc, #208]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c34:	f001 fe4e 	bl	80038d4 <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3c:	f001 fe4a 	bl	80038d4 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e04f      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 020c 	and.w	r2, r3, #12
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1eb      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d20c      	bcs.n	8001c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e032      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4916      	ldr	r1, [pc, #88]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	490e      	ldr	r1, [pc, #56]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cca:	f000 f821 	bl	8001d10 <HAL_RCC_GetSysClockFreq>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	490a      	ldr	r1, [pc, #40]	; (8001d04 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	5ccb      	ldrb	r3, [r1, r3]
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fefa 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023c00 	.word	0x40023c00
 8001d00:	40023800 	.word	0x40023800
 8001d04:	08004890 	.word	0x08004890
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000004 	.word	0x20000004

08001d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d14:	b094      	sub	sp, #80	; 0x50
 8001d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d20:	2300      	movs	r3, #0
 8001d22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d28:	4b79      	ldr	r3, [pc, #484]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d00d      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x40>
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	f200 80e1 	bhi.w	8001efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x34>
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d42:	e0db      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d44:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d48:	e0db      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d4a:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d4e:	e0d8      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d50:	4b6f      	ldr	r3, [pc, #444]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d5a:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d66:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d78:	633b      	str	r3, [r7, #48]	; 0x30
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d82:	4622      	mov	r2, r4
 8001d84:	462b      	mov	r3, r5
 8001d86:	f04f 0000 	mov.w	r0, #0
 8001d8a:	f04f 0100 	mov.w	r1, #0
 8001d8e:	0159      	lsls	r1, r3, #5
 8001d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d94:	0150      	lsls	r0, r2, #5
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	1a51      	subs	r1, r2, r1
 8001d9e:	6139      	str	r1, [r7, #16]
 8001da0:	4629      	mov	r1, r5
 8001da2:	eb63 0301 	sbc.w	r3, r3, r1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001db4:	4659      	mov	r1, fp
 8001db6:	018b      	lsls	r3, r1, #6
 8001db8:	4651      	mov	r1, sl
 8001dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dbe:	4651      	mov	r1, sl
 8001dc0:	018a      	lsls	r2, r1, #6
 8001dc2:	4651      	mov	r1, sl
 8001dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8001dc8:	4659      	mov	r1, fp
 8001dca:	eb63 0901 	sbc.w	r9, r3, r1
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001de2:	4690      	mov	r8, r2
 8001de4:	4699      	mov	r9, r3
 8001de6:	4623      	mov	r3, r4
 8001de8:	eb18 0303 	adds.w	r3, r8, r3
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	462b      	mov	r3, r5
 8001df0:	eb49 0303 	adc.w	r3, r9, r3
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e02:	4629      	mov	r1, r5
 8001e04:	024b      	lsls	r3, r1, #9
 8001e06:	4621      	mov	r1, r4
 8001e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	024a      	lsls	r2, r1, #9
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e16:	2200      	movs	r2, #0
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e20:	f7fe f9d2 	bl	80001c8 <__aeabi_uldivmod>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e2c:	e058      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2e:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	2200      	movs	r2, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	4611      	mov	r1, r2
 8001e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
 8001e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e48:	4642      	mov	r2, r8
 8001e4a:	464b      	mov	r3, r9
 8001e4c:	f04f 0000 	mov.w	r0, #0
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	0159      	lsls	r1, r3, #5
 8001e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e5a:	0150      	lsls	r0, r2, #5
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4641      	mov	r1, r8
 8001e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e66:	4649      	mov	r1, r9
 8001e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e80:	ebb2 040a 	subs.w	r4, r2, sl
 8001e84:	eb63 050b 	sbc.w	r5, r3, fp
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	00eb      	lsls	r3, r5, #3
 8001e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e96:	00e2      	lsls	r2, r4, #3
 8001e98:	4614      	mov	r4, r2
 8001e9a:	461d      	mov	r5, r3
 8001e9c:	4643      	mov	r3, r8
 8001e9e:	18e3      	adds	r3, r4, r3
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	eb45 0303 	adc.w	r3, r5, r3
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	028b      	lsls	r3, r1, #10
 8001eba:	4621      	mov	r1, r4
 8001ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	028a      	lsls	r2, r1, #10
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	61fa      	str	r2, [r7, #28]
 8001ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ed4:	f7fe f978 	bl	80001c8 <__aeabi_uldivmod>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4613      	mov	r3, r2
 8001ede:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	3301      	adds	r3, #1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001efa:	e002      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001efe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3750      	adds	r7, #80	; 0x50
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	00f42400 	.word	0x00f42400
 8001f18:	007a1200 	.word	0x007a1200

08001f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000000 	.word	0x20000000

08001f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f38:	f7ff fff0 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	0a9b      	lsrs	r3, r3, #10
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4903      	ldr	r1, [pc, #12]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	080048a0 	.word	0x080048a0

08001f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f60:	f7ff ffdc 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	0b5b      	lsrs	r3, r3, #13
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	4903      	ldr	r1, [pc, #12]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	080048a0 	.word	0x080048a0

08001f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e042      	b.n	800201c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fc94 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2224      	movs	r2, #36	; 0x24
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f82b 	bl	8002024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002028:	b0c0      	sub	sp, #256	; 0x100
 800202a:	af00      	add	r7, sp, #0
 800202c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002040:	68d9      	ldr	r1, [r3, #12]
 8002042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	ea40 0301 	orr.w	r3, r0, r1
 800204c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	431a      	orrs	r2, r3
 800205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	431a      	orrs	r2, r3
 8002064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800207c:	f021 010c 	bic.w	r1, r1, #12
 8002080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800208a:	430b      	orrs	r3, r1
 800208c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800208e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800209a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209e:	6999      	ldr	r1, [r3, #24]
 80020a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	ea40 0301 	orr.w	r3, r0, r1
 80020aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4b8f      	ldr	r3, [pc, #572]	; (80022f0 <UART_SetConfig+0x2cc>)
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d005      	beq.n	80020c4 <UART_SetConfig+0xa0>
 80020b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b8d      	ldr	r3, [pc, #564]	; (80022f4 <UART_SetConfig+0x2d0>)
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d104      	bne.n	80020ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020c4:	f7ff ff4a 	bl	8001f5c <HAL_RCC_GetPCLK2Freq>
 80020c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020cc:	e003      	b.n	80020d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020ce:	f7ff ff31 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 80020d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e0:	f040 810c 	bne.w	80022fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020e8:	2200      	movs	r2, #0
 80020ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020f6:	4622      	mov	r2, r4
 80020f8:	462b      	mov	r3, r5
 80020fa:	1891      	adds	r1, r2, r2
 80020fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80020fe:	415b      	adcs	r3, r3
 8002100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002102:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002106:	4621      	mov	r1, r4
 8002108:	eb12 0801 	adds.w	r8, r2, r1
 800210c:	4629      	mov	r1, r5
 800210e:	eb43 0901 	adc.w	r9, r3, r1
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800211e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002126:	4690      	mov	r8, r2
 8002128:	4699      	mov	r9, r3
 800212a:	4623      	mov	r3, r4
 800212c:	eb18 0303 	adds.w	r3, r8, r3
 8002130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002134:	462b      	mov	r3, r5
 8002136:	eb49 0303 	adc.w	r3, r9, r3
 800213a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800213e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800214a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800214e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002152:	460b      	mov	r3, r1
 8002154:	18db      	adds	r3, r3, r3
 8002156:	653b      	str	r3, [r7, #80]	; 0x50
 8002158:	4613      	mov	r3, r2
 800215a:	eb42 0303 	adc.w	r3, r2, r3
 800215e:	657b      	str	r3, [r7, #84]	; 0x54
 8002160:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002164:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002168:	f7fe f82e 	bl	80001c8 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <UART_SetConfig+0x2d4>)
 8002172:	fba3 2302 	umull	r2, r3, r3, r2
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	011c      	lsls	r4, r3, #4
 800217a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800217e:	2200      	movs	r2, #0
 8002180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002184:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002188:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800218c:	4642      	mov	r2, r8
 800218e:	464b      	mov	r3, r9
 8002190:	1891      	adds	r1, r2, r2
 8002192:	64b9      	str	r1, [r7, #72]	; 0x48
 8002194:	415b      	adcs	r3, r3
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002198:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800219c:	4641      	mov	r1, r8
 800219e:	eb12 0a01 	adds.w	sl, r2, r1
 80021a2:	4649      	mov	r1, r9
 80021a4:	eb43 0b01 	adc.w	fp, r3, r1
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021bc:	4692      	mov	sl, r2
 80021be:	469b      	mov	fp, r3
 80021c0:	4643      	mov	r3, r8
 80021c2:	eb1a 0303 	adds.w	r3, sl, r3
 80021c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021ca:	464b      	mov	r3, r9
 80021cc:	eb4b 0303 	adc.w	r3, fp, r3
 80021d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021e8:	460b      	mov	r3, r1
 80021ea:	18db      	adds	r3, r3, r3
 80021ec:	643b      	str	r3, [r7, #64]	; 0x40
 80021ee:	4613      	mov	r3, r2
 80021f0:	eb42 0303 	adc.w	r3, r2, r3
 80021f4:	647b      	str	r3, [r7, #68]	; 0x44
 80021f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021fe:	f7fd ffe3 	bl	80001c8 <__aeabi_uldivmod>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4611      	mov	r1, r2
 8002208:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <UART_SetConfig+0x2d4>)
 800220a:	fba3 2301 	umull	r2, r3, r3, r1
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2264      	movs	r2, #100	; 0x64
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	1acb      	subs	r3, r1, r3
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <UART_SetConfig+0x2d4>)
 8002220:	fba3 2302 	umull	r2, r3, r3, r2
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800222c:	441c      	add	r4, r3
 800222e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002232:	2200      	movs	r2, #0
 8002234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002238:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800223c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002240:	4642      	mov	r2, r8
 8002242:	464b      	mov	r3, r9
 8002244:	1891      	adds	r1, r2, r2
 8002246:	63b9      	str	r1, [r7, #56]	; 0x38
 8002248:	415b      	adcs	r3, r3
 800224a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800224c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002250:	4641      	mov	r1, r8
 8002252:	1851      	adds	r1, r2, r1
 8002254:	6339      	str	r1, [r7, #48]	; 0x30
 8002256:	4649      	mov	r1, r9
 8002258:	414b      	adcs	r3, r1
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002268:	4659      	mov	r1, fp
 800226a:	00cb      	lsls	r3, r1, #3
 800226c:	4651      	mov	r1, sl
 800226e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002272:	4651      	mov	r1, sl
 8002274:	00ca      	lsls	r2, r1, #3
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	4603      	mov	r3, r0
 800227c:	4642      	mov	r2, r8
 800227e:	189b      	adds	r3, r3, r2
 8002280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002284:	464b      	mov	r3, r9
 8002286:	460a      	mov	r2, r1
 8002288:	eb42 0303 	adc.w	r3, r2, r3
 800228c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800229c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022a4:	460b      	mov	r3, r1
 80022a6:	18db      	adds	r3, r3, r3
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022aa:	4613      	mov	r3, r2
 80022ac:	eb42 0303 	adc.w	r3, r2, r3
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022ba:	f7fd ff85 	bl	80001c8 <__aeabi_uldivmod>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <UART_SetConfig+0x2d4>)
 80022c4:	fba3 1302 	umull	r1, r3, r3, r2
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	2164      	movs	r1, #100	; 0x64
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	3332      	adds	r3, #50	; 0x32
 80022d6:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <UART_SetConfig+0x2d4>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	f003 0207 	and.w	r2, r3, #7
 80022e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4422      	add	r2, r4
 80022ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022ec:	e106      	b.n	80024fc <UART_SetConfig+0x4d8>
 80022ee:	bf00      	nop
 80022f0:	40011000 	.word	0x40011000
 80022f4:	40011400 	.word	0x40011400
 80022f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002300:	2200      	movs	r2, #0
 8002302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002306:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800230a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800230e:	4642      	mov	r2, r8
 8002310:	464b      	mov	r3, r9
 8002312:	1891      	adds	r1, r2, r2
 8002314:	6239      	str	r1, [r7, #32]
 8002316:	415b      	adcs	r3, r3
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
 800231a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800231e:	4641      	mov	r1, r8
 8002320:	1854      	adds	r4, r2, r1
 8002322:	4649      	mov	r1, r9
 8002324:	eb43 0501 	adc.w	r5, r3, r1
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	00eb      	lsls	r3, r5, #3
 8002332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002336:	00e2      	lsls	r2, r4, #3
 8002338:	4614      	mov	r4, r2
 800233a:	461d      	mov	r5, r3
 800233c:	4643      	mov	r3, r8
 800233e:	18e3      	adds	r3, r4, r3
 8002340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002344:	464b      	mov	r3, r9
 8002346:	eb45 0303 	adc.w	r3, r5, r3
 800234a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800235a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800236a:	4629      	mov	r1, r5
 800236c:	008b      	lsls	r3, r1, #2
 800236e:	4621      	mov	r1, r4
 8002370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002374:	4621      	mov	r1, r4
 8002376:	008a      	lsls	r2, r1, #2
 8002378:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800237c:	f7fd ff24 	bl	80001c8 <__aeabi_uldivmod>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4b60      	ldr	r3, [pc, #384]	; (8002508 <UART_SetConfig+0x4e4>)
 8002386:	fba3 2302 	umull	r2, r3, r3, r2
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	011c      	lsls	r4, r3, #4
 800238e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002392:	2200      	movs	r2, #0
 8002394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002398:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800239c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023a0:	4642      	mov	r2, r8
 80023a2:	464b      	mov	r3, r9
 80023a4:	1891      	adds	r1, r2, r2
 80023a6:	61b9      	str	r1, [r7, #24]
 80023a8:	415b      	adcs	r3, r3
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b0:	4641      	mov	r1, r8
 80023b2:	1851      	adds	r1, r2, r1
 80023b4:	6139      	str	r1, [r7, #16]
 80023b6:	4649      	mov	r1, r9
 80023b8:	414b      	adcs	r3, r1
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023c8:	4659      	mov	r1, fp
 80023ca:	00cb      	lsls	r3, r1, #3
 80023cc:	4651      	mov	r1, sl
 80023ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023d2:	4651      	mov	r1, sl
 80023d4:	00ca      	lsls	r2, r1, #3
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	4642      	mov	r2, r8
 80023de:	189b      	adds	r3, r3, r2
 80023e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023e4:	464b      	mov	r3, r9
 80023e6:	460a      	mov	r2, r1
 80023e8:	eb42 0303 	adc.w	r3, r2, r3
 80023ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80023fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002408:	4649      	mov	r1, r9
 800240a:	008b      	lsls	r3, r1, #2
 800240c:	4641      	mov	r1, r8
 800240e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002412:	4641      	mov	r1, r8
 8002414:	008a      	lsls	r2, r1, #2
 8002416:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800241a:	f7fd fed5 	bl	80001c8 <__aeabi_uldivmod>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4611      	mov	r1, r2
 8002424:	4b38      	ldr	r3, [pc, #224]	; (8002508 <UART_SetConfig+0x4e4>)
 8002426:	fba3 2301 	umull	r2, r3, r3, r1
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2264      	movs	r2, #100	; 0x64
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	1acb      	subs	r3, r1, r3
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	3332      	adds	r3, #50	; 0x32
 8002438:	4a33      	ldr	r2, [pc, #204]	; (8002508 <UART_SetConfig+0x4e4>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002444:	441c      	add	r4, r3
 8002446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800244a:	2200      	movs	r2, #0
 800244c:	673b      	str	r3, [r7, #112]	; 0x70
 800244e:	677a      	str	r2, [r7, #116]	; 0x74
 8002450:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002454:	4642      	mov	r2, r8
 8002456:	464b      	mov	r3, r9
 8002458:	1891      	adds	r1, r2, r2
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	415b      	adcs	r3, r3
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002464:	4641      	mov	r1, r8
 8002466:	1851      	adds	r1, r2, r1
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	4649      	mov	r1, r9
 800246c:	414b      	adcs	r3, r1
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800247c:	4659      	mov	r1, fp
 800247e:	00cb      	lsls	r3, r1, #3
 8002480:	4651      	mov	r1, sl
 8002482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002486:	4651      	mov	r1, sl
 8002488:	00ca      	lsls	r2, r1, #3
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	4603      	mov	r3, r0
 8002490:	4642      	mov	r2, r8
 8002492:	189b      	adds	r3, r3, r2
 8002494:	66bb      	str	r3, [r7, #104]	; 0x68
 8002496:	464b      	mov	r3, r9
 8002498:	460a      	mov	r2, r1
 800249a:	eb42 0303 	adc.w	r3, r2, r3
 800249e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	663b      	str	r3, [r7, #96]	; 0x60
 80024aa:	667a      	str	r2, [r7, #100]	; 0x64
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024b8:	4649      	mov	r1, r9
 80024ba:	008b      	lsls	r3, r1, #2
 80024bc:	4641      	mov	r1, r8
 80024be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024c2:	4641      	mov	r1, r8
 80024c4:	008a      	lsls	r2, r1, #2
 80024c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024ca:	f7fd fe7d 	bl	80001c8 <__aeabi_uldivmod>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <UART_SetConfig+0x4e4>)
 80024d4:	fba3 1302 	umull	r1, r3, r3, r2
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	2164      	movs	r1, #100	; 0x64
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	3332      	adds	r3, #50	; 0x32
 80024e6:	4a08      	ldr	r2, [pc, #32]	; (8002508 <UART_SetConfig+0x4e4>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	f003 020f 	and.w	r2, r3, #15
 80024f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4422      	add	r2, r4
 80024fa:	609a      	str	r2, [r3, #8]
}
 80024fc:	bf00      	nop
 80024fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002502:	46bd      	mov	sp, r7
 8002504:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002508:	51eb851f 	.word	0x51eb851f

0800250c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <LL_RCC_GetSysClkSource+0x18>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030c 	and.w	r3, r3, #12
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800

08002528 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <LL_RCC_GetAHBPrescaler+0x18>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <LL_RCC_GetAPB1Prescaler+0x18>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800

08002560 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800

0800257c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <LL_RCC_PLL_GetMainSource+0x18>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800

08002598 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <LL_RCC_PLL_GetN+0x18>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40023800 	.word	0x40023800

080025b4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <LL_RCC_PLL_GetP+0x18>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800

080025d0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <LL_RCC_PLL_GetDivider+0x18>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800

080025ec <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80025f4:	f000 f820 	bl	8002638 <RCC_GetSystemClockFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f840 	bl	8002688 <RCC_GetHCLKClockFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f84e 	bl	80026b4 <RCC_GetPCLK1ClockFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f85a 	bl	80026dc <RCC_GetPCLK2ClockFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60da      	str	r2, [r3, #12]
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002642:	f7ff ff63 	bl	800250c <LL_RCC_GetSysClkSource>
 8002646:	4603      	mov	r3, r0
 8002648:	2b08      	cmp	r3, #8
 800264a:	d00c      	beq.n	8002666 <RCC_GetSystemClockFreq+0x2e>
 800264c:	2b08      	cmp	r3, #8
 800264e:	d80f      	bhi.n	8002670 <RCC_GetSystemClockFreq+0x38>
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <RCC_GetSystemClockFreq+0x22>
 8002654:	2b04      	cmp	r3, #4
 8002656:	d003      	beq.n	8002660 <RCC_GetSystemClockFreq+0x28>
 8002658:	e00a      	b.n	8002670 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <RCC_GetSystemClockFreq+0x48>)
 800265c:	607b      	str	r3, [r7, #4]
      break;
 800265e:	e00a      	b.n	8002676 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <RCC_GetSystemClockFreq+0x4c>)
 8002662:	607b      	str	r3, [r7, #4]
      break;
 8002664:	e007      	b.n	8002676 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002666:	2008      	movs	r0, #8
 8002668:	f000 f84c 	bl	8002704 <RCC_PLL_GetFreqDomain_SYS>
 800266c:	6078      	str	r0, [r7, #4]
      break;
 800266e:	e002      	b.n	8002676 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <RCC_GetSystemClockFreq+0x48>)
 8002672:	607b      	str	r3, [r7, #4]
      break;
 8002674:	bf00      	nop
  }

  return frequency;
 8002676:	687b      	ldr	r3, [r7, #4]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	00f42400 	.word	0x00f42400
 8002684:	007a1200 	.word	0x007a1200

08002688 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002690:	f7ff ff4a 	bl	8002528 <LL_RCC_GetAHBPrescaler>
 8002694:	4603      	mov	r3, r0
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <RCC_GetHCLKClockFreq+0x28>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	461a      	mov	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	40d3      	lsrs	r3, r2
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	08004890 	.word	0x08004890

080026b4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80026bc:	f7ff ff42 	bl	8002544 <LL_RCC_GetAPB1Prescaler>
 80026c0:	4603      	mov	r3, r0
 80026c2:	0a9b      	lsrs	r3, r3, #10
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <RCC_GetPCLK1ClockFreq+0x24>)
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	461a      	mov	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	40d3      	lsrs	r3, r2
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	080048a0 	.word	0x080048a0

080026dc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80026e4:	f7ff ff3c 	bl	8002560 <LL_RCC_GetAPB2Prescaler>
 80026e8:	4603      	mov	r3, r0
 80026ea:	0b5b      	lsrs	r3, r3, #13
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <RCC_GetPCLK2ClockFreq+0x24>)
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
 80026f0:	461a      	mov	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	40d3      	lsrs	r3, r2
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	080048a0 	.word	0x080048a0

08002704 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002718:	f7ff ff30 	bl	800257c <LL_RCC_PLL_GetMainSource>
 800271c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800272a:	d003      	beq.n	8002734 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800272c:	e005      	b.n	800273a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002730:	617b      	str	r3, [r7, #20]
      break;
 8002732:	e005      	b.n	8002740 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002736:	617b      	str	r3, [r7, #20]
      break;
 8002738:	e002      	b.n	8002740 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800273c:	617b      	str	r3, [r7, #20]
      break;
 800273e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b08      	cmp	r3, #8
 8002744:	d113      	bne.n	800276e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002746:	f7ff ff43 	bl	80025d0 <LL_RCC_PLL_GetDivider>
 800274a:	4602      	mov	r2, r0
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fbb3 f4f2 	udiv	r4, r3, r2
 8002752:	f7ff ff21 	bl	8002598 <LL_RCC_PLL_GetN>
 8002756:	4603      	mov	r3, r0
 8002758:	fb03 f404 	mul.w	r4, r3, r4
 800275c:	f7ff ff2a 	bl	80025b4 <LL_RCC_PLL_GetP>
 8002760:	4603      	mov	r3, r0
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	3301      	adds	r3, #1
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fbb4 f3f3 	udiv	r3, r4, r3
 800276c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800276e:	693b      	ldr	r3, [r7, #16]
}
 8002770:	4618      	mov	r0, r3
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	bd90      	pop	{r4, r7, pc}
 8002778:	00f42400 	.word	0x00f42400
 800277c:	007a1200 	.word	0x007a1200

08002780 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(const USART_TypeDef *USARTx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002794:	bf0c      	ite	eq
 8002796:	2301      	moveq	r3, #1
 8002798:	2300      	movne	r3, #0
 800279a:	b2db      	uxtb	r3, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	611a      	str	r2, [r3, #16]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	615a      	str	r2, [r3, #20]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80027f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f8:	b0c0      	sub	sp, #256	; 0x100
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002800:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002804:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002808:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002814:	f040 810c 	bne.w	8002a30 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002818:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800281c:	2200      	movs	r2, #0
 800281e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002822:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002826:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800282a:	4622      	mov	r2, r4
 800282c:	462b      	mov	r3, r5
 800282e:	1891      	adds	r1, r2, r2
 8002830:	6639      	str	r1, [r7, #96]	; 0x60
 8002832:	415b      	adcs	r3, r3
 8002834:	667b      	str	r3, [r7, #100]	; 0x64
 8002836:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800283a:	4621      	mov	r1, r4
 800283c:	eb12 0801 	adds.w	r8, r2, r1
 8002840:	4629      	mov	r1, r5
 8002842:	eb43 0901 	adc.w	r9, r3, r1
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800285a:	4690      	mov	r8, r2
 800285c:	4699      	mov	r9, r3
 800285e:	4623      	mov	r3, r4
 8002860:	eb18 0303 	adds.w	r3, r8, r3
 8002864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002868:	462b      	mov	r3, r5
 800286a:	eb49 0303 	adc.w	r3, r9, r3
 800286e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002872:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002876:	2200      	movs	r2, #0
 8002878:	469a      	mov	sl, r3
 800287a:	4693      	mov	fp, r2
 800287c:	eb1a 030a 	adds.w	r3, sl, sl
 8002880:	65bb      	str	r3, [r7, #88]	; 0x58
 8002882:	eb4b 030b 	adc.w	r3, fp, fp
 8002886:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002888:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800288c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002890:	f7fd fc9a 	bl	80001c8 <__aeabi_uldivmod>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <LL_USART_SetBaudRate+0x238>)
 800289a:	fba3 2302 	umull	r2, r3, r3, r2
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	b29c      	uxth	r4, r3
 80028a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028b0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028b4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80028b8:	4642      	mov	r2, r8
 80028ba:	464b      	mov	r3, r9
 80028bc:	1891      	adds	r1, r2, r2
 80028be:	6539      	str	r1, [r7, #80]	; 0x50
 80028c0:	415b      	adcs	r3, r3
 80028c2:	657b      	str	r3, [r7, #84]	; 0x54
 80028c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028c8:	4641      	mov	r1, r8
 80028ca:	1851      	adds	r1, r2, r1
 80028cc:	64b9      	str	r1, [r7, #72]	; 0x48
 80028ce:	4649      	mov	r1, r9
 80028d0:	414b      	adcs	r3, r1
 80028d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80028e0:	4659      	mov	r1, fp
 80028e2:	00cb      	lsls	r3, r1, #3
 80028e4:	4651      	mov	r1, sl
 80028e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ea:	4651      	mov	r1, sl
 80028ec:	00ca      	lsls	r2, r1, #3
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	4642      	mov	r2, r8
 80028f6:	189b      	adds	r3, r3, r2
 80028f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028fc:	464b      	mov	r3, r9
 80028fe:	460a      	mov	r2, r1
 8002900:	eb42 0303 	adc.w	r3, r2, r3
 8002904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002908:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800290c:	2200      	movs	r2, #0
 800290e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002912:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002916:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800291a:	460b      	mov	r3, r1
 800291c:	18db      	adds	r3, r3, r3
 800291e:	643b      	str	r3, [r7, #64]	; 0x40
 8002920:	4613      	mov	r3, r2
 8002922:	eb42 0303 	adc.w	r3, r2, r3
 8002926:	647b      	str	r3, [r7, #68]	; 0x44
 8002928:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800292c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002930:	f7fd fc4a 	bl	80001c8 <__aeabi_uldivmod>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4611      	mov	r1, r2
 800293a:	4b3c      	ldr	r3, [pc, #240]	; (8002a2c <LL_USART_SetBaudRate+0x238>)
 800293c:	fba3 2301 	umull	r2, r3, r3, r1
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	2264      	movs	r2, #100	; 0x64
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	1acb      	subs	r3, r1, r3
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002950:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <LL_USART_SetBaudRate+0x238>)
 8002952:	fba3 2302 	umull	r2, r3, r3, r2
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	b29b      	uxth	r3, r3
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	b29b      	uxth	r3, r3
 800295e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002962:	b29b      	uxth	r3, r3
 8002964:	4423      	add	r3, r4
 8002966:	b29c      	uxth	r4, r3
 8002968:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800296c:	2200      	movs	r2, #0
 800296e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002972:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002976:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800297a:	4642      	mov	r2, r8
 800297c:	464b      	mov	r3, r9
 800297e:	1891      	adds	r1, r2, r2
 8002980:	63b9      	str	r1, [r7, #56]	; 0x38
 8002982:	415b      	adcs	r3, r3
 8002984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002986:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800298a:	4641      	mov	r1, r8
 800298c:	1851      	adds	r1, r2, r1
 800298e:	6339      	str	r1, [r7, #48]	; 0x30
 8002990:	4649      	mov	r1, r9
 8002992:	414b      	adcs	r3, r1
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029a2:	4659      	mov	r1, fp
 80029a4:	00cb      	lsls	r3, r1, #3
 80029a6:	4651      	mov	r1, sl
 80029a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ac:	4651      	mov	r1, sl
 80029ae:	00ca      	lsls	r2, r1, #3
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	4603      	mov	r3, r0
 80029b6:	4642      	mov	r2, r8
 80029b8:	189b      	adds	r3, r3, r2
 80029ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029be:	464b      	mov	r3, r9
 80029c0:	460a      	mov	r2, r1
 80029c2:	eb42 0303 	adc.w	r3, r2, r3
 80029c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80029ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029d4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80029d8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80029dc:	460b      	mov	r3, r1
 80029de:	18db      	adds	r3, r3, r3
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e2:	4613      	mov	r3, r2
 80029e4:	eb42 0303 	adc.w	r3, r2, r3
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029ee:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80029f2:	f7fd fbe9 	bl	80001c8 <__aeabi_uldivmod>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <LL_USART_SetBaudRate+0x238>)
 80029fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	2164      	movs	r1, #100	; 0x64
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	3332      	adds	r3, #50	; 0x32
 8002a0e:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <LL_USART_SetBaudRate+0x238>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	4423      	add	r3, r4
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8002a2a:	e108      	b.n	8002c3e <LL_USART_SetBaudRate+0x44a>
 8002a2c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002a30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a34:	2200      	movs	r2, #0
 8002a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a3a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a3e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002a42:	4642      	mov	r2, r8
 8002a44:	464b      	mov	r3, r9
 8002a46:	1891      	adds	r1, r2, r2
 8002a48:	6239      	str	r1, [r7, #32]
 8002a4a:	415b      	adcs	r3, r3
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a52:	4641      	mov	r1, r8
 8002a54:	1854      	adds	r4, r2, r1
 8002a56:	4649      	mov	r1, r9
 8002a58:	eb43 0501 	adc.w	r5, r3, r1
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	00eb      	lsls	r3, r5, #3
 8002a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a6a:	00e2      	lsls	r2, r4, #3
 8002a6c:	4614      	mov	r4, r2
 8002a6e:	461d      	mov	r5, r3
 8002a70:	4643      	mov	r3, r8
 8002a72:	18e3      	adds	r3, r4, r3
 8002a74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a78:	464b      	mov	r3, r9
 8002a7a:	eb45 0303 	adc.w	r3, r5, r3
 8002a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002a82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a8c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	008b      	lsls	r3, r1, #2
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	008a      	lsls	r2, r1, #2
 8002aaa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002aae:	f7fd fb8b 	bl	80001c8 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4b65      	ldr	r3, [pc, #404]	; (8002c4c <LL_USART_SetBaudRate+0x458>)
 8002ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	b29c      	uxth	r4, r3
 8002ac4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ad2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002ad6:	4642      	mov	r2, r8
 8002ad8:	464b      	mov	r3, r9
 8002ada:	1891      	adds	r1, r2, r2
 8002adc:	61b9      	str	r1, [r7, #24]
 8002ade:	415b      	adcs	r3, r3
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ae6:	4641      	mov	r1, r8
 8002ae8:	1851      	adds	r1, r2, r1
 8002aea:	6139      	str	r1, [r7, #16]
 8002aec:	4649      	mov	r1, r9
 8002aee:	414b      	adcs	r3, r1
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002afe:	4659      	mov	r1, fp
 8002b00:	00cb      	lsls	r3, r1, #3
 8002b02:	4651      	mov	r1, sl
 8002b04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b08:	4651      	mov	r1, sl
 8002b0a:	00ca      	lsls	r2, r1, #3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4603      	mov	r3, r0
 8002b12:	4642      	mov	r2, r8
 8002b14:	189b      	adds	r3, r3, r2
 8002b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	460a      	mov	r2, r1
 8002b1e:	eb42 0303 	adc.w	r3, r2, r3
 8002b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b30:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002b40:	4649      	mov	r1, r9
 8002b42:	008b      	lsls	r3, r1, #2
 8002b44:	4641      	mov	r1, r8
 8002b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b4a:	4641      	mov	r1, r8
 8002b4c:	008a      	lsls	r2, r1, #2
 8002b4e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002b52:	f7fd fb39 	bl	80001c8 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <LL_USART_SetBaudRate+0x458>)
 8002b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	2264      	movs	r2, #100	; 0x64
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	1acb      	subs	r3, r1, r3
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	3332      	adds	r3, #50	; 0x32
 8002b70:	4a36      	ldr	r2, [pc, #216]	; (8002c4c <LL_USART_SetBaudRate+0x458>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	4423      	add	r3, r4
 8002b82:	b29c      	uxth	r4, r3
 8002b84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b88:	2200      	movs	r2, #0
 8002b8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b8c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b8e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b92:	4642      	mov	r2, r8
 8002b94:	464b      	mov	r3, r9
 8002b96:	1891      	adds	r1, r2, r2
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	415b      	adcs	r3, r3
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	1851      	adds	r1, r2, r1
 8002ba6:	6039      	str	r1, [r7, #0]
 8002ba8:	4649      	mov	r1, r9
 8002baa:	414b      	adcs	r3, r1
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bba:	4659      	mov	r1, fp
 8002bbc:	00cb      	lsls	r3, r1, #3
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bc4:	4651      	mov	r1, sl
 8002bc6:	00ca      	lsls	r2, r1, #3
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4642      	mov	r2, r8
 8002bd0:	189b      	adds	r3, r3, r2
 8002bd2:	673b      	str	r3, [r7, #112]	; 0x70
 8002bd4:	464b      	mov	r3, r9
 8002bd6:	460a      	mov	r2, r1
 8002bd8:	eb42 0303 	adc.w	r3, r2, r3
 8002bdc:	677b      	str	r3, [r7, #116]	; 0x74
 8002bde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002be2:	2200      	movs	r2, #0
 8002be4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002be6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002bf4:	4649      	mov	r1, r9
 8002bf6:	008b      	lsls	r3, r1, #2
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bfe:	4641      	mov	r1, r8
 8002c00:	008a      	lsls	r2, r1, #2
 8002c02:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002c06:	f7fd fadf 	bl	80001c8 <__aeabi_uldivmod>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <LL_USART_SetBaudRate+0x458>)
 8002c10:	fba3 1302 	umull	r1, r3, r3, r2
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	2164      	movs	r1, #100	; 0x64
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	3332      	adds	r3, #50	; 0x32
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <LL_USART_SetBaudRate+0x458>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4423      	add	r3, r4
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3c:	609a      	str	r2, [r3, #8]
}
 8002c3e:	bf00      	nop
 8002c40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c44:	46bd      	mov	sp, r7
 8002c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c4a:	bf00      	nop
 8002c4c:	51eb851f 	.word	0x51eb851f

08002c50 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff fd8c 	bl	8002780 <LL_USART_IsEnabled>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d15e      	bne.n	8002d2c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c76:	f023 030c 	bic.w	r3, r3, #12
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	6851      	ldr	r1, [r2, #4]
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	68d2      	ldr	r2, [r2, #12]
 8002c82:	4311      	orrs	r1, r2
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	6912      	ldr	r2, [r2, #16]
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	6992      	ldr	r2, [r2, #24]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff fd83 	bl	80027a8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff fd90 	bl	80027ce <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002cae:	f107 0308 	add.w	r3, r7, #8
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fc9a 	bl	80025ec <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a1f      	ldr	r2, [pc, #124]	; (8002d38 <LL_USART_Init+0xe8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d102      	bne.n	8002cc6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	e021      	b.n	8002d0a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1c      	ldr	r2, [pc, #112]	; (8002d3c <LL_USART_Init+0xec>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d102      	bne.n	8002cd4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	e01a      	b.n	8002d0a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <LL_USART_Init+0xf0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d102      	bne.n	8002ce2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	e013      	b.n	8002d0a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <LL_USART_Init+0xf4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d102      	bne.n	8002cf0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e00c      	b.n	8002d0a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <LL_USART_Init+0xf8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d102      	bne.n	8002cfe <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	e005      	b.n	8002d0a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <LL_USART_Init+0xfc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d101      	bne.n	8002d0a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00d      	beq.n	8002d2c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69b9      	ldr	r1, [r7, #24]
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff fd64 	bl	80027f4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002d2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40011000 	.word	0x40011000
 8002d3c:	40004400 	.word	0x40004400
 8002d40:	40004800 	.word	0x40004800
 8002d44:	40011400 	.word	0x40011400
 8002d48:	40004c00 	.word	0x40004c00
 8002d4c:	40005000 	.word	0x40005000

08002d50 <CpuIrqDisable>:
** \brief     Disable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  __asm volatile ("cpsid i");
 8002d54:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <CpuIrqEnable>:
** \brief     Enable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  __asm volatile ("cpsie i");
 8002d64:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 8002d74:	f7ff ffec 	bl	8002d50 <CpuIrqDisable>
} /*** end of CpuInit ***/
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 8002d82:	f000 fbe9 	bl	8003558 <NvmVerifyChecksum>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01e      	beq.n	8002dca <CpuStartUserProgram+0x4e>
    /* not a valid user program so it cannot be started */
    return;
  }
#if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  /* invoke callback */
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8002d8c:	f7fd fbbc 	bl	8000508 <CpuUserProgramStartHook>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01b      	beq.n	8002dce <CpuStartUserProgram+0x52>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 8002d96:	f000 fe39 	bl	8003a0c <ComFree>
#endif
  /* reset the HAL */
  HAL_DeInit();
 8002d9a:	f7fd fe6d 	bl	8000a78 <HAL_DeInit>
  /* reset the timer */
  TimerReset();
 8002d9e:	f000 fd67 	bl	8003870 <TimerReset>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 8002da2:	f000 fbe0 	bl	8003566 <NvmGetUserProgBaseAddress>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <CpuStartUserProgram+0x5c>)
 8002daa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002dae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002db2:	6093      	str	r3, [r2, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 8002db4:	f000 fbd7 	bl	8003566 <NvmGetUserProgBaseAddress>
 8002db8:	4603      	mov	r3, r0
 8002dba:	3304      	adds	r3, #4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	607b      	str	r3, [r7, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 8002dc0:	f7ff ffce 	bl	8002d60 <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4798      	blx	r3
 8002dc8:	e002      	b.n	8002dd0 <CpuStartUserProgram+0x54>
    return;
 8002dca:	bf00      	nop
 8002dcc:	e000      	b.n	8002dd0 <CpuStartUserProgram+0x54>
    return;
 8002dce:	bf00      	nop
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	617b      	str	r3, [r7, #20]
  to = (blt_int8u *)dest;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	613b      	str	r3, [r7, #16]

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 8002df2:	e009      	b.n	8002e08 <CpuMemCopy+0x2c>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	1c53      	adds	r3, r2, #1
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1c59      	adds	r1, r3, #1
 8002dfe:	6139      	str	r1, [r7, #16]
 8002e00:	7812      	ldrb	r2, [r2, #0]
 8002e02:	701a      	strb	r2, [r3, #0]
    /* keep the watchdog happy */
    CopService();
 8002e04:	f000 fe8d 	bl	8003b22 <CopService>
  while (len-- > 0)
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	1e5a      	subs	r2, r3, #1
 8002e0c:	80fa      	strh	r2, [r7, #6]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <CpuMemCopy+0x18>
  }
} /*** end of CpuMemCopy ***/
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <CpuMemSet>:
** \param     len  Number of bytes to write.
** \return    none.
**
****************************************************************************************/
void CpuMemSet(blt_addr dest, blt_int8u value, blt_int16u len)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70fb      	strb	r3, [r7, #3]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	803b      	strh	r3, [r7, #0]
  blt_int8u *to;

  /* set casted pointer */
  to = (blt_int8u *)dest;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* set all bytes at the destination address to the specified value */
  while (len-- > 0)
 8002e30:	e006      	b.n	8002e40 <CpuMemSet+0x24>
  {
    /* set byte value */
    *to++ = value;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	60fa      	str	r2, [r7, #12]
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	701a      	strb	r2, [r3, #0]
    /* keep the watchdog happy */
    CopService();
 8002e3c:	f000 fe71 	bl	8003b22 <CopService>
  while (len-- > 0)
 8002e40:	883b      	ldrh	r3, [r7, #0]
 8002e42:	1e5a      	subs	r2, r3, #1
 8002e44:	803a      	strh	r2, [r7, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f3      	bne.n	8002e32 <CpuMemSet+0x16>
  }
} /*** end of CpuMemSet ***/
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <FlashInit>:
** \brief     Initializes the flash driver.
** \return    none.
**
****************************************************************************************/
void FlashInit(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* init the flash block info structs by setting the address to an invalid address */
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <FlashInit+0x20>)
 8002e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5e:	601a      	str	r2, [r3, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <FlashInit+0x24>)
 8002e62:	f04f 32ff 	mov.w	r2, #4294967295
 8002e66:	601a      	str	r2, [r3, #0]
} /*** end of FlashInit ***/
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	200000a0 	.word	0x200000a0
 8002e78:	200002a4 	.word	0x200002a4

08002e7c <FlashWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  blt_addr base_addr;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	1e5a      	subs	r2, r3, #1
 8002e8c:	491c      	ldr	r1, [pc, #112]	; (8002f00 <FlashWrite+0x84>)
 8002e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e92:	4419      	add	r1, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1acb      	subs	r3, r1, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d901      	bls.n	8002ea2 <FlashWrite+0x26>
  {
    return BLT_FALSE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e02a      	b.n	8002ef8 <FlashWrite+0x7c>
  }
  
  /* make sure the addresses are within the flash device */
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 faf0 	bl	8003488 <FlashGetSector>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2bff      	cmp	r3, #255	; 0xff
 8002eac:	d009      	beq.n	8002ec2 <FlashWrite+0x46>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fae6 	bl	8003488 <FlashGetSector>
 8002ebc:	4603      	mov	r3, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8002ebe:	2bff      	cmp	r3, #255	; 0xff
 8002ec0:	d101      	bne.n	8002ec6 <FlashWrite+0x4a>
  {
    return BLT_FALSE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e018      	b.n	8002ef8 <FlashWrite+0x7c>
  }

  /* if this is the bootblock, then let the boot block manager handle it */
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	617b      	str	r3, [r7, #20]
  if (base_addr == flashLayout[0].sector_start)
 8002ed2:	4a0c      	ldr	r2, [pc, #48]	; (8002f04 <FlashWrite+0x88>)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d107      	bne.n	8002eea <FlashWrite+0x6e>
  {
    /* let the boot block manager handle it */
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68f9      	ldr	r1, [r7, #12]
 8002ee0:	4809      	ldr	r0, [pc, #36]	; (8002f08 <FlashWrite+0x8c>)
 8002ee2:	f000 f967 	bl	80031b4 <FlashAddToBlock>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	e006      	b.n	8002ef8 <FlashWrite+0x7c>
  }
  /* let the block manager handle it */
  return FlashAddToBlock(&blockInfo, addr, data, len);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68f9      	ldr	r1, [r7, #12]
 8002ef0:	4806      	ldr	r0, [pc, #24]	; (8002f0c <FlashWrite+0x90>)
 8002ef2:	f000 f95f 	bl	80031b4 <FlashAddToBlock>
 8002ef6:	4603      	mov	r3, r0
} /*** end of FlashWrite ***/
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	080e0000 	.word	0x080e0000
 8002f04:	08008000 	.word	0x08008000
 8002f08:	200002a4 	.word	0x200002a4
 8002f0c:	200000a0 	.word	0x200000a0

08002f10 <FlashErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashErase(blt_addr addr, blt_int32u len)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  blt_int8u first_sector;
  blt_int8u last_sector;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	1e5a      	subs	r2, r3, #1
 8002f1e:	4916      	ldr	r1, [pc, #88]	; (8002f78 <FlashErase+0x68>)
 8002f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f24:	4419      	add	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	1acb      	subs	r3, r1, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d901      	bls.n	8002f34 <FlashErase+0x24>
  {
    return BLT_FALSE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e01c      	b.n	8002f6e <FlashErase+0x5e>
  }
  
  /* obtain the first and last sector number */
  first_sector = FlashGetSector(addr);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 faa7 	bl	8003488 <FlashGetSector>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	73fb      	strb	r3, [r7, #15]
  last_sector  = FlashGetSector(addr+len-1);
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	3b01      	subs	r3, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fa9e 	bl	8003488 <FlashGetSector>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	73bb      	strb	r3, [r7, #14]
  /* check them */
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2bff      	cmp	r3, #255	; 0xff
 8002f54:	d002      	beq.n	8002f5c <FlashErase+0x4c>
 8002f56:	7bbb      	ldrb	r3, [r7, #14]
 8002f58:	2bff      	cmp	r3, #255	; 0xff
 8002f5a:	d101      	bne.n	8002f60 <FlashErase+0x50>
  {
    return BLT_FALSE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e006      	b.n	8002f6e <FlashErase+0x5e>
  }
  /* erase the sectors */
  return FlashEraseSectors(first_sector, last_sector);
 8002f60:	7bba      	ldrb	r2, [r7, #14]
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fa30 	bl	80033cc <FlashEraseSectors>
 8002f6c:	4603      	mov	r3, r0
} /*** end of FlashErase ***/
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	080e0000 	.word	0x080e0000

08002f7c <FlashWriteChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWriteChecksum(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]

  /* first check that the bootblock contains valid data. if not, this means the
   * bootblock is not part of the reprogramming this time and therefore no
   * new checksum needs to be written
   */
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8002f86:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <FlashWriteChecksum+0x84>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d101      	bne.n	8002f94 <FlashWriteChecksum+0x18>
  {
    return BLT_TRUE;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e031      	b.n	8002ff8 <FlashWriteChecksum+0x7c>
#endif

  /* compute the checksum. note that the user program's vectors are not yet written
   * to flash but are present in the bootblock data structure at this point.
   */
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <FlashWriteChecksum+0x88>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <FlashWriteChecksum+0x8c>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8002fa8:	4b18      	ldr	r3, [pc, #96]	; (800300c <FlashWriteChecksum+0x90>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8002fb2:	4b17      	ldr	r3, [pc, #92]	; (8003010 <FlashWriteChecksum+0x94>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8002fbc:	4b15      	ldr	r3, [pc, #84]	; (8003014 <FlashWriteChecksum+0x98>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <FlashWriteChecksum+0x9c>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <FlashWriteChecksum+0xa0>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	607b      	str	r3, [r7, #4]
  signature_checksum  = ~signature_checksum; /* one's complement */
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	607b      	str	r3, [r7, #4]
  signature_checksum += 1; /* two's complement */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	607b      	str	r3, [r7, #4]

  /* write the checksum */
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <FlashWriteChecksum+0xa4>)
 8002fe8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002fec:	1d3a      	adds	r2, r7, #4
 8002fee:	2104      	movs	r1, #4
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff43 	bl	8002e7c <FlashWrite>
 8002ff6:	4603      	mov	r3, r0
                    sizeof(blt_addr), (blt_int8u *)&signature_checksum);
} /*** end of FlashWriteChecksum ***/
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	200002a4 	.word	0x200002a4
 8003004:	200002a8 	.word	0x200002a8
 8003008:	200002ac 	.word	0x200002ac
 800300c:	200002b0 	.word	0x200002b0
 8003010:	200002b4 	.word	0x200002b4
 8003014:	200002b8 	.word	0x200002b8
 8003018:	200002bc 	.word	0x200002bc
 800301c:	200002c0 	.word	0x200002c0
 8003020:	08008000 	.word	0x08008000

08003024 <FlashVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashVerifyChecksum(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]

  /* verify the checksum based on how it was written by CpuWriteChecksum() */
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 800302e:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <FlashVerifyChecksum+0x84>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <FlashVerifyChecksum+0x84>)
 800303a:	3304      	adds	r3, #4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8003044:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <FlashVerifyChecksum+0x84>)
 8003046:	3308      	adds	r3, #8
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 8003050:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <FlashVerifyChecksum+0x84>)
 8003052:	330c      	adds	r3, #12
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <FlashVerifyChecksum+0x84>)
 800305e:	3310      	adds	r3, #16
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <FlashVerifyChecksum+0x84>)
 800306a:	3314      	adds	r3, #20
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <FlashVerifyChecksum+0x84>)
 8003076:	3318      	adds	r3, #24
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <FlashVerifyChecksum+0x84>)
 8003082:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	607b      	str	r3, [r7, #4]
  /* sum should add up to an unsigned 32-bit value of 0 */
  if (signature_checksum == 0)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <FlashVerifyChecksum+0x74>
  {
    /* checksum okay */
    return BLT_TRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <FlashVerifyChecksum+0x76>
  }
  /* checksum incorrect */
  return BLT_FALSE;
 8003098:	2300      	movs	r3, #0
} /*** end of FlashVerifyChecksum ***/
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	08008000 	.word	0x08008000

080030ac <FlashDone>:
**            the currently active block that needs to be flashed.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashDone(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* check if there is still data waiting to be programmed in the boot block */
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 80030b0:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <FlashDone+0x40>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d007      	beq.n	80030ca <FlashDone+0x1e>
  {
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 80030ba:	480c      	ldr	r0, [pc, #48]	; (80030ec <FlashDone+0x40>)
 80030bc:	f000 f8dc 	bl	8003278 <FlashWriteBlock>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <FlashDone+0x1e>
    {
      return BLT_FALSE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e00d      	b.n	80030e6 <FlashDone+0x3a>
    }
  }

  /* check if there is still data waiting to be programmed */
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <FlashDone+0x44>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d007      	beq.n	80030e4 <FlashDone+0x38>
  {
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 80030d4:	4806      	ldr	r0, [pc, #24]	; (80030f0 <FlashDone+0x44>)
 80030d6:	f000 f8cf 	bl	8003278 <FlashWriteBlock>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <FlashDone+0x38>
    {
      return BLT_FALSE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <FlashDone+0x3a>
    }
  }
  /* still here so all is okay */
  return BLT_TRUE;
 80030e4:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 80030e6:	4618      	mov	r0, r3
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200002a4 	.word	0x200002a4
 80030f0:	200000a0 	.word	0x200000a0

080030f4 <FlashGetUserProgBaseAddress>:
**            This is basically the first address in the flashLayout table.
** \return    Base address.
**
****************************************************************************************/
blt_addr FlashGetUserProgBaseAddress(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return flashLayout[0].sector_start;
 80030f8:	4b02      	ldr	r3, [pc, #8]	; (8003104 <FlashGetUserProgBaseAddress+0x10>)
} /*** end of FlashGetUserProgBaseAddress ***/
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	08008000 	.word	0x08008000

08003108 <FlashInitBlock>:
** \param     address Base address of the block data.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  /* check address alignment */
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <FlashInitBlock+0x18>
  {
    return BLT_FALSE;
 800311c:	2300      	movs	r3, #0
 800311e:	e012      	b.n	8003146 <FlashInitBlock+0x3e>
  }
  /* make sure that we are initializing a new block and not the same one */
  if (block->base_addr == address)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d101      	bne.n	800312e <FlashInitBlock+0x26>
  {
    /* block already initialized, so nothing to do */
    return BLT_TRUE;
 800312a:	2301      	movs	r3, #1
 800312c:	e00b      	b.n	8003146 <FlashInitBlock+0x3e>
  }
  /* set the base address and copies the current data from flash */
  block->base_addr = address;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	601a      	str	r2, [r3, #0]
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3304      	adds	r3, #4
 8003138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800313c:	6839      	ldr	r1, [r7, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fe4c 	bl	8002ddc <CpuMemCopy>
  return BLT_TRUE;
 8003144:	2301      	movs	r3, #1
} /*** end of FlashInitBlock ***/
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <FlashSwitchBlock>:
** \return    The pointer of the block info struct that is no being used, or a NULL
**            pointer in case of error.
**
****************************************************************************************/
static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  /* check if a switch needs to be made away from the boot block. in this case the boot
   * block shouldn't be written yet, because this is done at the end of the programming
   * session by FlashDone(), this is right after the checksum was written.
   */
  if (block == &bootBlockInfo)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <FlashSwitchBlock+0x58>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d102      	bne.n	8003168 <FlashSwitchBlock+0x18>
  {
    /* switch from the boot block to the generic block info structure */
    block = &blockInfo;
 8003162:	4b12      	ldr	r3, [pc, #72]	; (80031ac <FlashSwitchBlock+0x5c>)
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	e010      	b.n	800318a <FlashSwitchBlock+0x3a>
  }
  /* check if a switch back into the bootblock is needed. in this case the generic block
   * doesn't need to be written here yet.
   */
  else if (base_addr == flashLayout[0].sector_start)
 8003168:	4a11      	ldr	r2, [pc, #68]	; (80031b0 <FlashSwitchBlock+0x60>)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	4293      	cmp	r3, r2
 800316e:	d104      	bne.n	800317a <FlashSwitchBlock+0x2a>
  {
    /* switch from the generic block to the boot block info structure */
    block = &bootBlockInfo;
 8003170:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <FlashSwitchBlock+0x58>)
 8003172:	607b      	str	r3, [r7, #4]
    base_addr = flashLayout[0].sector_start;
 8003174:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <FlashSwitchBlock+0x60>)
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	e007      	b.n	800318a <FlashSwitchBlock+0x3a>
  }
  else
  {
    /* need to switch to a new block, so program the current one and init the next */
    if (FlashWriteBlock(block) == BLT_FALSE)
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f87c 	bl	8003278 <FlashWriteBlock>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <FlashSwitchBlock+0x3a>
    {
      return BLT_NULL;
 8003186:	2300      	movs	r3, #0
 8003188:	e009      	b.n	800319e <FlashSwitchBlock+0x4e>
    }
  }

  /* initialize tne new block when necessary */
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 800318a:	6839      	ldr	r1, [r7, #0]
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff ffbb 	bl	8003108 <FlashInitBlock>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <FlashSwitchBlock+0x4c>
  {
    return BLT_NULL;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <FlashSwitchBlock+0x4e>
  }

  /* still here to all is okay  */
  return block;
 800319c:	687b      	ldr	r3, [r7, #4]
} /*** end of FlashSwitchBlock ***/
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	200002a4 	.word	0x200002a4
 80031ac:	200000a0 	.word	0x200000a0
 80031b0:	08008000 	.word	0x08008000

080031b4 <FlashAddToBlock>:
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
                                blt_int8u *data, blt_int32u len)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
  blt_addr   current_base_addr;
  blt_int8u  *dst;
  blt_int8u  *src;

  /* determine the current base address */
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	617b      	str	r3, [r7, #20]

  /* make sure the blockInfo is not uninitialized */
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d6:	d108      	bne.n	80031ea <FlashAddToBlock+0x36>
  {
    /* initialize the blockInfo struct for the current block */
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 80031d8:	6979      	ldr	r1, [r7, #20]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff ff94 	bl	8003108 <FlashInitBlock>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <FlashAddToBlock+0x36>
    {
      return BLT_FALSE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e042      	b.n	8003270 <FlashAddToBlock+0xbc>
    }
  }

  /* check if the new data fits in the current block */
  if (block->base_addr != current_base_addr)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d009      	beq.n	8003208 <FlashAddToBlock+0x54>
  {
    /* need to switch to a new block, so program the current one and init the next */
    block = FlashSwitchBlock(block, current_base_addr);
 80031f4:	6979      	ldr	r1, [r7, #20]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff ffaa 	bl	8003150 <FlashSwitchBlock>
 80031fc:	60f8      	str	r0, [r7, #12]
    if (block == BLT_NULL)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <FlashAddToBlock+0x54>
    {
      return BLT_FALSE;
 8003204:	2300      	movs	r3, #0
 8003206:	e033      	b.n	8003270 <FlashAddToBlock+0xbc>
    }
  }

  /* add the data to the current block, but check for block overflow */
  dst = &(block->data[address - block->base_addr]);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	3304      	adds	r3, #4
 8003216:	61fb      	str	r3, [r7, #28]
  src = data;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	61bb      	str	r3, [r7, #24]
  do
  {
    /* keep the watchdog happy */
    CopService();
 800321c:	f000 fc81 	bl	8003b22 <CopService>
    /* buffer overflow? */
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3304      	adds	r3, #4
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800322c:	d30f      	bcc.n	800324e <FlashAddToBlock+0x9a>
    {
      /* need to switch to a new block, so program the current one and init the next */
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003234:	4619      	mov	r1, r3
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff ff8a 	bl	8003150 <FlashSwitchBlock>
 800323c:	60f8      	str	r0, [r7, #12]
      if (block == BLT_NULL)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <FlashAddToBlock+0x94>
      {
        return BLT_FALSE;
 8003244:	2300      	movs	r3, #0
 8003246:	e013      	b.n	8003270 <FlashAddToBlock+0xbc>
      }
      /* reset destination pointer */
      dst = &(block->data[0]);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3304      	adds	r3, #4
 800324c:	61fb      	str	r3, [r7, #28]
    }
    /* write the data to the buffer */
    *dst = *src;
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	781a      	ldrb	r2, [r3, #0]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	701a      	strb	r2, [r3, #0]
    /* update pointers */
    dst++;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3301      	adds	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
    src++;
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	3301      	adds	r3, #1
 8003260:	61bb      	str	r3, [r7, #24]
    /* decrement byte counter */
    len--;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	3b01      	subs	r3, #1
 8003266:	603b      	str	r3, [r7, #0]
  }
  while (len > 0);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1d6      	bne.n	800321c <FlashAddToBlock+0x68>
  /* still here so all is good */
  return BLT_TRUE;
 800326e:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 8003270:	4618      	mov	r0, r3
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 8003278:	b5b0      	push	{r4, r5, r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  blt_addr   prog_addr;
  blt_int32u prog_data;
  blt_int32u word_cnt;
  blt_bool   result = BLT_TRUE;
 8003280:	2301      	movs	r3, #1
 8003282:	74fb      	strb	r3, [r7, #19]
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 8003284:	f7fd fdac 	bl	8000de0 <HAL_FLASH_Unlock>

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	e029      	b.n	80032e2 <FlashWriteBlock+0x6a>
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60bb      	str	r3, [r7, #8]
    /* keep the watchdog happy */
    CopService();
 80032a8:	f000 fc3b 	bl	8003b22 <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2200      	movs	r2, #0
 80032b0:	461c      	mov	r4, r3
 80032b2:	4615      	mov	r5, r2
 80032b4:	4622      	mov	r2, r4
 80032b6:	462b      	mov	r3, r5
 80032b8:	68f9      	ldr	r1, [r7, #12]
 80032ba:	2002      	movs	r0, #2
 80032bc:	f7fd fd3c 	bl	8000d38 <HAL_FLASH_Program>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <FlashWriteBlock+0x54>
    {
      result = BLT_FALSE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	74fb      	strb	r3, [r7, #19]
      break;
 80032ca:	e00d      	b.n	80032e8 <FlashWriteBlock+0x70>
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d002      	beq.n	80032dc <FlashWriteBlock+0x64>
    {
      result = BLT_FALSE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	74fb      	strb	r3, [r7, #19]
      break;
 80032da:	e005      	b.n	80032e8 <FlashWriteBlock+0x70>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3301      	adds	r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b7f      	cmp	r3, #127	; 0x7f
 80032e6:	d9d2      	bls.n	800328e <FlashWriteBlock+0x16>
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 80032e8:	f7fd fd9c 	bl	8000e24 <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
} /*** end of FlashWriteBlock ***/
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080032f8 <FlashEmptyCheckSector>:
**            flashLayout array, not an index into the array.
** \return    BLT_TRUE if the flash sector is already erased, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEmptyCheckSector(blt_int8u sector_num)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  blt_bool   result = BLT_FALSE;
 8003302:	2300      	movs	r3, #0
 8003304:	77fb      	strb	r3, [r7, #31]
  blt_int8u  sectorIdx;
  blt_int32u wordCnt;
  blt_int32u volatile const * wordPtr;
  
  /* find the index of this sector into the flashLayout array */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8003306:	2300      	movs	r3, #0
 8003308:	77bb      	strb	r3, [r7, #30]
 800330a:	e052      	b.n	80033b2 <FlashEmptyCheckSector+0xba>
  {
    /* is this the index that the sector number belongs to? */
    if (flashLayout[sectorIdx].sector_num == sector_num)
 800330c:	7fba      	ldrb	r2, [r7, #30]
 800330e:	492d      	ldr	r1, [pc, #180]	; (80033c4 <FlashEmptyCheckSector+0xcc>)
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	3308      	adds	r3, #8
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	79fa      	ldrb	r2, [r7, #7]
 8003320:	429a      	cmp	r2, r3
 8003322:	d143      	bne.n	80033ac <FlashEmptyCheckSector+0xb4>
    {
      /* retrieve sector info */
      sectorAddr = flashLayout[sectorIdx].sector_start;
 8003324:	7fba      	ldrb	r2, [r7, #30]
 8003326:	4927      	ldr	r1, [pc, #156]	; (80033c4 <FlashEmptyCheckSector+0xcc>)
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	613b      	str	r3, [r7, #16]
      sectorSize = flashLayout[sectorIdx].sector_size;
 8003336:	7fba      	ldrb	r2, [r7, #30]
 8003338:	4922      	ldr	r1, [pc, #136]	; (80033c4 <FlashEmptyCheckSector+0xcc>)
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	3304      	adds	r3, #4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
      
      /* sanity check. sector base address should be 32-bit aligned and the size
       * should be a multiple of 32-bits.
       */
      ASSERT_RT(((sectorAddr % sizeof(blt_int32u)) == 0) && 
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d104      	bne.n	800335e <FlashEmptyCheckSector+0x66>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d004      	beq.n	8003368 <FlashEmptyCheckSector+0x70>
 800335e:	f240 21c5 	movw	r1, #709	; 0x2c5
 8003362:	4819      	ldr	r0, [pc, #100]	; (80033c8 <FlashEmptyCheckSector+0xd0>)
 8003364:	f000 fabd 	bl	80038e2 <AssertFailure>
                ((sectorSize % sizeof(blt_int32u)) == 0));  
      
      /* update result to success for now */
      result = BLT_TRUE;
 8003368:	2301      	movs	r3, #1
 800336a:	77fb      	strb	r3, [r7, #31]
      /* initialize the pointer to the first word in the sector */
      wordPtr = (blt_int32u volatile const *)sectorAddr;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	617b      	str	r3, [r7, #20]
      /* read sector 32-bits at a time */
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	e014      	b.n	80033a0 <FlashEmptyCheckSector+0xa8>
      {
        /* service the watchdog every 256th loop iteration */
        if ((wordCnt % 256) == 0)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <FlashEmptyCheckSector+0x8a>
        {
          CopService();
 800337e:	f000 fbd0 	bl	8003b22 <CopService>
        }
        /* word not in the erased state? */
        if (*wordPtr != 0xFFFFFFFFu)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338a:	d003      	beq.n	8003394 <FlashEmptyCheckSector+0x9c>
        {
          /* sector not empty, update the result accordingly */
          result = BLT_FALSE;
 800338c:	2300      	movs	r3, #0
 800338e:	77fb      	strb	r3, [r7, #31]
          /* no point in continuing the sector empty check */
          break;
 8003390:	bf00      	nop
        }
        /* set pointer to the next word in the sector */
        wordPtr++;
      }
      /* sector index found and checked. no need to continue with another one.*/
      break;
 8003392:	e011      	b.n	80033b8 <FlashEmptyCheckSector+0xc0>
        wordPtr++;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3304      	adds	r3, #4
 8003398:	617b      	str	r3, [r7, #20]
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	3301      	adds	r3, #1
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d3e5      	bcc.n	8003376 <FlashEmptyCheckSector+0x7e>
      break;
 80033aa:	e005      	b.n	80033b8 <FlashEmptyCheckSector+0xc0>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 80033ac:	7fbb      	ldrb	r3, [r7, #30]
 80033ae:	3301      	adds	r3, #1
 80033b0:	77bb      	strb	r3, [r7, #30]
 80033b2:	7fbb      	ldrb	r3, [r7, #30]
 80033b4:	2b09      	cmp	r3, #9
 80033b6:	d9a9      	bls.n	800330c <FlashEmptyCheckSector+0x14>
    }
  }  
  /* give the result back to the caller. */
  return result;
 80033b8:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of FlashEmptyCheckSector ***/
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	080048a8 	.word	0x080048a8
 80033c8:	08004838 	.word	0x08004838

080033cc <FlashEraseSectors>:
** \param     last_sector  Last flash sector number.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEraseSectors(blt_int8u first_sector, blt_int8u last_sector)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	460a      	mov	r2, r1
 80033d6:	71fb      	strb	r3, [r7, #7]
 80033d8:	4613      	mov	r3, r2
 80033da:	71bb      	strb	r3, [r7, #6]
  blt_bool result = BLT_TRUE;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  blt_int8u sectorIdx;
  FLASH_EraseInitTypeDef eraseInitStruct;
  blt_int32u eraseSectorError = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]

  /* validate the sector numbers */
  if (first_sector > last_sector)
 80033e6:	79fa      	ldrb	r2, [r7, #7]
 80033e8:	79bb      	ldrb	r3, [r7, #6]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d902      	bls.n	80033f4 <FlashEraseSectors+0x28>
  {
    result = BLT_FALSE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if ((first_sector < flashLayout[0].sector_num) || \
 80033f4:	2202      	movs	r2, #2
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d303      	bcc.n	8003404 <FlashEraseSectors+0x38>
      (last_sector > flashLayout[FLASH_TOTAL_SECTORS-1].sector_num))
 80033fc:	220b      	movs	r2, #11
  if ((first_sector < flashLayout[0].sector_num) || \
 80033fe:	79bb      	ldrb	r3, [r7, #6]
 8003400:	4293      	cmp	r3, r2
 8003402:	d902      	bls.n	800340a <FlashEraseSectors+0x3e>
  {
    result = BLT_FALSE;
 8003404:	2300      	movs	r3, #0
 8003406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* only move forward with the erase operation if all is okay so far */
  if (result == BLT_TRUE)
 800340a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800340e:	2b01      	cmp	r3, #1
 8003410:	d133      	bne.n	800347a <FlashEraseSectors+0xae>
  {
    /* intialize the sector erase info structure */
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8003416:	2302      	movs	r3, #2
 8003418:	623b      	str	r3, [r7, #32]
    eraseInitStruct.NbSectors = 1;
 800341a:	2301      	movs	r3, #1
 800341c:	61fb      	str	r3, [r7, #28]

    /* unlock the flash array */
    HAL_FLASH_Unlock();
 800341e:	f7fd fcdf 	bl	8000de0 <HAL_FLASH_Unlock>

    /* erase all sectors one by one */
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003428:	e020      	b.n	800346c <FlashEraseSectors+0xa0>
    {
      /* no need to erase the sector if it is already empty */
      if (FlashEmptyCheckSector(sectorIdx) == BLT_FALSE)
 800342a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ff62 	bl	80032f8 <FlashEmptyCheckSector>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d113      	bne.n	8003462 <FlashEraseSectors+0x96>
      {
        /* keep the watchdog happy */
        CopService();
 800343a:	f000 fb72 	bl	8003b22 <CopService>
        /* set the sector to erase */
        eraseInitStruct.Sector = sectorIdx;
 800343e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003442:	61bb      	str	r3, [r7, #24]
        /* submit the sector erase request */
        if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8003444:	f107 020c 	add.w	r2, r7, #12
 8003448:	f107 0310 	add.w	r3, r7, #16
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd fe28 	bl	80010a4 <HAL_FLASHEx_Erase>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <FlashEraseSectors+0x96>
        {
          /* could not perform erase operation */
          result = BLT_FALSE;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          /* error detected so don't bother continuing with the loop */
          break;
 8003460:	e009      	b.n	8003476 <FlashEraseSectors+0xaa>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8003462:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003466:	3301      	adds	r3, #1
 8003468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800346c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003470:	79bb      	ldrb	r3, [r7, #6]
 8003472:	429a      	cmp	r2, r3
 8003474:	d9d9      	bls.n	800342a <FlashEraseSectors+0x5e>
        }
      }
    }

    /* lock the flash array again */
    HAL_FLASH_Lock();
 8003476:	f7fd fcd5 	bl	8000e24 <HAL_FLASH_Lock>
  }

  /* give the result back to the caller */
  return result;
 800347a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
} /*** end of FlashEraseSectors ***/
 800347e:	4618      	mov	r0, r3
 8003480:	3728      	adds	r7, #40	; 0x28
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  blt_int8u result = FLASH_INVALID_SECTOR;
 8003490:	23ff      	movs	r3, #255	; 0xff
 8003492:	73fb      	strb	r3, [r7, #15]
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8003494:	2300      	movs	r3, #0
 8003496:	73bb      	strb	r3, [r7, #14]
 8003498:	e02f      	b.n	80034fa <FlashGetSector+0x72>
  {
    /* keep the watchdog happy */
    CopService();
 800349a:	f000 fb42 	bl	8003b22 <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 800349e:	7bba      	ldrb	r2, [r7, #14]
 80034a0:	491a      	ldr	r1, [pc, #104]	; (800350c <FlashGetSector+0x84>)
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d31f      	bcc.n	80034f4 <FlashGetSector+0x6c>
        (address < (flashLayout[sectorIdx].sector_start + \
 80034b4:	7bba      	ldrb	r2, [r7, #14]
 80034b6:	4915      	ldr	r1, [pc, #84]	; (800350c <FlashGetSector+0x84>)
 80034b8:	4613      	mov	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	6819      	ldr	r1, [r3, #0]
                    flashLayout[sectorIdx].sector_size)))
 80034c4:	7bba      	ldrb	r2, [r7, #14]
 80034c6:	4811      	ldr	r0, [pc, #68]	; (800350c <FlashGetSector+0x84>)
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4403      	add	r3, r0
 80034d2:	3304      	adds	r3, #4
 80034d4:	681b      	ldr	r3, [r3, #0]
        (address < (flashLayout[sectorIdx].sector_start + \
 80034d6:	440b      	add	r3, r1
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d20a      	bcs.n	80034f4 <FlashGetSector+0x6c>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 80034de:	7bba      	ldrb	r2, [r7, #14]
 80034e0:	490a      	ldr	r1, [pc, #40]	; (800350c <FlashGetSector+0x84>)
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3308      	adds	r3, #8
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	73fb      	strb	r3, [r7, #15]
      /* all done so no need to continue looping */
      break;
 80034f2:	e005      	b.n	8003500 <FlashGetSector+0x78>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 80034f4:	7bbb      	ldrb	r3, [r7, #14]
 80034f6:	3301      	adds	r3, #1
 80034f8:	73bb      	strb	r3, [r7, #14]
 80034fa:	7bbb      	ldrb	r3, [r7, #14]
 80034fc:	2b09      	cmp	r3, #9
 80034fe:	d9cc      	bls.n	800349a <FlashGetSector+0x12>
    }
  }
  /* give the result back to the caller */
  return result;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of FlashGetSector ***/
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	080048a8 	.word	0x080048a8

08003510 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8003514:	f7ff fc9e 	bl	8002e54 <FlashInit>
} /*** end of NvmInit ***/
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}

0800351c <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff fca5 	bl	8002e7c <FlashWrite>
 8003532:	4603      	mov	r3, r0
} /*** end of NvmWrite ***/
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8003546:	6839      	ldr	r1, [r7, #0]
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff fce1 	bl	8002f10 <FlashErase>
 800354e:	4603      	mov	r3, r0
} /*** end of NvmErase ***/
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 800355c:	f7ff fd62 	bl	8003024 <FlashVerifyChecksum>
 8003560:	4603      	mov	r3, r0
#endif
} /*** end of NvmVerifyChecksum ***/
 8003562:	4618      	mov	r0, r3
 8003564:	bd80      	pop	{r7, pc}

08003566 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	af00      	add	r7, sp, #0
  return FlashGetUserProgBaseAddress();
 800356a:	f7ff fdc3 	bl	80030f4 <FlashGetUserProgBaseAddress>
 800356e:	4603      	mov	r3, r0
} /*** end of NvmGetUserProgBaseAddress ***/
 8003570:	4618      	mov	r0, r3
 8003572:	bd80      	pop	{r7, pc}

08003574 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8003578:	f7ff fd00 	bl	8002f7c <FlashWriteChecksum>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <NvmDone+0x12>
  {
    return BLT_FALSE;
 8003582:	2300      	movs	r3, #0
 8003584:	e002      	b.n	800358c <NvmDone+0x18>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
 8003586:	f7ff fd91 	bl	80030ac <FlashDone>
 800358a:	4603      	mov	r3, r0
} /*** end of NvmDone ***/
 800358c:	4618      	mov	r0, r3
 800358e:	bd80      	pop	{r7, pc}

08003590 <LL_USART_Enable>:
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	60da      	str	r2, [r3, #12]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_USART_Disable>:
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	2b80      	cmp	r3, #128	; 0x80
 8003608:	bf0c      	ite	eq
 800360a:	2301      	moveq	r3, #1
 800360c:	2300      	movne	r3, #0
 800360e:	b2db      	uxtb	r3, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	b2db      	uxtb	r3, r3
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	605a      	str	r2, [r3, #4]
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <Rs232Init>:
** \brief     Initializes the RS232 communication interface.
** \return    none.
**
****************************************************************************************/
void Rs232Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
            (BOOT_COM_RS232_CHANNEL_INDEX == 5) ||
            (BOOT_COM_RS232_CHANNEL_INDEX == 6) ||
            (BOOT_COM_RS232_CHANNEL_INDEX == 7));

  /* disable the UART peripheral */
  LL_USART_Disable(USART_CHANNEL);
 800365a:	480f      	ldr	r0, [pc, #60]	; (8003698 <Rs232Init+0x44>)
 800365c:	f7ff ffa8 	bl	80035b0 <LL_USART_Disable>
  /* configure UART peripheral */
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 8003660:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003664:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003672:	230c      	movs	r3, #12
 8003674:	617b      	str	r3, [r7, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
  /* initialize the UART peripheral */
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4805      	ldr	r0, [pc, #20]	; (8003698 <Rs232Init+0x44>)
 8003684:	f7ff fae4 	bl	8002c50 <LL_USART_Init>
  LL_USART_Enable(USART_CHANNEL);
 8003688:	4803      	ldr	r0, [pc, #12]	; (8003698 <Rs232Init+0x44>)
 800368a:	f7ff ff81 	bl	8003590 <LL_USART_Enable>
} /*** end of Rs232Init ***/
 800368e:	bf00      	nop
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40004400 	.word	0x40004400

0800369c <Rs232TransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void Rs232TransmitPacket(blt_int8u *data, blt_int8u len)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	70fb      	strb	r3, [r7, #3]
  blt_int16u data_index;

  /* verify validity of the len-paramenter */
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	2b81      	cmp	r3, #129	; 0x81
 80036ac:	d903      	bls.n	80036b6 <Rs232TransmitPacket+0x1a>
 80036ae:	2183      	movs	r1, #131	; 0x83
 80036b0:	480f      	ldr	r0, [pc, #60]	; (80036f0 <Rs232TransmitPacket+0x54>)
 80036b2:	f000 f916 	bl	80038e2 <AssertFailure>

  /* first transmit the length of the packet */
  Rs232TransmitByte(len);
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f89b 	bl	80037f4 <Rs232TransmitByte>

  /* transmit all the packet bytes one-by-one */
  for (data_index = 0; data_index < len; data_index++)
 80036be:	2300      	movs	r3, #0
 80036c0:	81fb      	strh	r3, [r7, #14]
 80036c2:	e00b      	b.n	80036dc <Rs232TransmitPacket+0x40>
  {
    /* keep the watchdog happy */
    CopService();
 80036c4:	f000 fa2d 	bl	8003b22 <CopService>
    /* write byte */
    Rs232TransmitByte(data[data_index]);
 80036c8:	89fb      	ldrh	r3, [r7, #14]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 f88f 	bl	80037f4 <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 80036d6:	89fb      	ldrh	r3, [r7, #14]
 80036d8:	3301      	adds	r3, #1
 80036da:	81fb      	strh	r3, [r7, #14]
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	89fa      	ldrh	r2, [r7, #14]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d3ee      	bcc.n	80036c4 <Rs232TransmitPacket+0x28>
  }
} /*** end of Rs232TransmitPacket ***/
 80036e6:	bf00      	nop
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	0800485c 	.word	0x0800485c

080036f4 <Rs232ReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE if a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool Rs232ReceivePacket(blt_int8u *data, blt_int8u *len)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  static blt_int8u xcpCtoRxLength;
  static blt_bool  xcpCtoRxInProgress = BLT_FALSE;
  static blt_int32u xcpCtoRxStartTime = 0;

  /* start of cto packet received? */
  if (xcpCtoRxInProgress == BLT_FALSE)
 80036fe:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <Rs232ReceivePacket+0xb8>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d119      	bne.n	800373a <Rs232ReceivePacket+0x46>
  {
    /* store the message length when received */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8003706:	482a      	ldr	r0, [pc, #168]	; (80037b0 <Rs232ReceivePacket+0xbc>)
 8003708:	f000 f85a 	bl	80037c0 <Rs232ReceiveByte>
 800370c:	4603      	mov	r3, r0
 800370e:	2b01      	cmp	r3, #1
 8003710:	d146      	bne.n	80037a0 <Rs232ReceivePacket+0xac>
    {
      if ( (xcpCtoReqPacket[0] > 0) &&
 8003712:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <Rs232ReceivePacket+0xbc>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d042      	beq.n	80037a0 <Rs232ReceivePacket+0xac>
           (xcpCtoReqPacket[0] <= BOOT_COM_RS232_RX_MAX_DATA) )
 800371a:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <Rs232ReceivePacket+0xbc>)
 800371c:	781b      	ldrb	r3, [r3, #0]
      if ( (xcpCtoReqPacket[0] > 0) &&
 800371e:	2b81      	cmp	r3, #129	; 0x81
 8003720:	d83e      	bhi.n	80037a0 <Rs232ReceivePacket+0xac>
      {
        /* store the start time */
        xcpCtoRxStartTime = TimerGet();
 8003722:	f000 f8cd 	bl	80038c0 <TimerGet>
 8003726:	4603      	mov	r3, r0
 8003728:	4a22      	ldr	r2, [pc, #136]	; (80037b4 <Rs232ReceivePacket+0xc0>)
 800372a:	6013      	str	r3, [r2, #0]
        /* reset packet data count */
        xcpCtoRxLength = 0;
 800372c:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <Rs232ReceivePacket+0xc4>)
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
        /* indicate that a cto packet is being received */
        xcpCtoRxInProgress = BLT_TRUE;
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <Rs232ReceivePacket+0xb8>)
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	e032      	b.n	80037a0 <Rs232ReceivePacket+0xac>
    }
  }
  else
  {
    /* store the next packet byte */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 800373a:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <Rs232ReceivePacket+0xc4>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	3301      	adds	r3, #1
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <Rs232ReceivePacket+0xbc>)
 8003742:	4413      	add	r3, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f83b 	bl	80037c0 <Rs232ReceiveByte>
 800374a:	4603      	mov	r3, r0
 800374c:	2b01      	cmp	r3, #1
 800374e:	d11c      	bne.n	800378a <Rs232ReceivePacket+0x96>
    {
      /* increment the packet data count */
      xcpCtoRxLength++;
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <Rs232ReceivePacket+0xc4>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	b2da      	uxtb	r2, r3
 8003758:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <Rs232ReceivePacket+0xc4>)
 800375a:	701a      	strb	r2, [r3, #0]

      /* check to see if the entire packet was received */
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <Rs232ReceivePacket+0xbc>)
 800375e:	781a      	ldrb	r2, [r3, #0]
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <Rs232ReceivePacket+0xc4>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d11b      	bne.n	80037a0 <Rs232ReceivePacket+0xac>
      {
        /* copy the packet data */
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4914      	ldr	r1, [pc, #80]	; (80037bc <Rs232ReceivePacket+0xc8>)
 800376c:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <Rs232ReceivePacket+0xc4>)
 800376e:	7812      	ldrb	r2, [r2, #0]
 8003770:	b292      	uxth	r2, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fb32 	bl	8002ddc <CpuMemCopy>
        /* done with cto packet reception */
        xcpCtoRxInProgress = BLT_FALSE;
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <Rs232ReceivePacket+0xb8>)
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
        /* set the packet length */
        *len = xcpCtoRxLength;
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <Rs232ReceivePacket+0xc4>)
 8003780:	781a      	ldrb	r2, [r3, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	701a      	strb	r2, [r3, #0]
        /* packet reception complete */
        return BLT_TRUE;
 8003786:	2301      	movs	r3, #1
 8003788:	e00b      	b.n	80037a2 <Rs232ReceivePacket+0xae>
      }
    }
    else
    {
      /* check packet reception timeout */
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 800378a:	f000 f899 	bl	80038c0 <TimerGet>
 800378e:	4602      	mov	r2, r0
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <Rs232ReceivePacket+0xc0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	33c8      	adds	r3, #200	; 0xc8
 8003796:	429a      	cmp	r2, r3
 8003798:	d902      	bls.n	80037a0 <Rs232ReceivePacket+0xac>
      {
        /* cancel cto packet reception due to timeout. note that that automaticaly
         * discards the already received packet bytes, allowing the host to retry.
         */
        xcpCtoRxInProgress = BLT_FALSE;
 800379a:	4b04      	ldr	r3, [pc, #16]	; (80037ac <Rs232ReceivePacket+0xb8>)
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  /* packet reception not yet complete */
  return BLT_FALSE;
 80037a0:	2300      	movs	r3, #0
} /*** end of Rs232ReceivePacket ***/
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200004a8 	.word	0x200004a8
 80037b0:	200004ac 	.word	0x200004ac
 80037b4:	20000530 	.word	0x20000530
 80037b8:	20000534 	.word	0x20000534
 80037bc:	200004ad 	.word	0x200004ad

080037c0 <Rs232ReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 80037c8:	4809      	ldr	r0, [pc, #36]	; (80037f0 <Rs232ReceiveByte+0x30>)
 80037ca:	f7ff ff01 	bl	80035d0 <LL_USART_IsActiveFlag_RXNE>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <Rs232ReceiveByte+0x26>
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 80037d4:	4806      	ldr	r0, [pc, #24]	; (80037f0 <Rs232ReceiveByte+0x30>)
 80037d6:	f7ff ff21 	bl	800361c <LL_USART_ReceiveData8>
 80037da:	4603      	mov	r3, r0
 80037dc:	461a      	mov	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	701a      	strb	r2, [r3, #0]
    /* all done */
    return BLT_TRUE;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <Rs232ReceiveByte+0x28>
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 80037e6:	2300      	movs	r3, #0
} /*** end of Rs232ReceiveByte ***/
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40004400 	.word	0x40004400

080037f4 <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
static void Rs232TransmitByte(blt_int8u data)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	4619      	mov	r1, r3
 8003802:	480e      	ldr	r0, [pc, #56]	; (800383c <Rs232TransmitByte+0x48>)
 8003804:	f7ff ff17 	bl	8003636 <LL_USART_TransmitData8>
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 8003808:	f000 f85a 	bl	80038c0 <TimerGet>
 800380c:	4603      	mov	r3, r0
 800380e:	330a      	adds	r3, #10
 8003810:	60fb      	str	r3, [r7, #12]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8003812:	e007      	b.n	8003824 <Rs232TransmitByte+0x30>
  {
    /* keep the watchdog happy */
    CopService();
 8003814:	f000 f985 	bl	8003b22 <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 8003818:	f000 f852 	bl	80038c0 <TimerGet>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4293      	cmp	r3, r2
 8003822:	d306      	bcc.n	8003832 <Rs232TransmitByte+0x3e>
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8003824:	4805      	ldr	r0, [pc, #20]	; (800383c <Rs232TransmitByte+0x48>)
 8003826:	f7ff fee6 	bl	80035f6 <LL_USART_IsActiveFlag_TXE>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f1      	beq.n	8003814 <Rs232TransmitByte+0x20>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 8003830:	e000      	b.n	8003834 <Rs232TransmitByte+0x40>
      break;
 8003832:	bf00      	nop
} /*** end of Rs232TransmitByte ***/
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40004400 	.word	0x40004400

08003840 <TimerInit>:
** \brief     Initializes the polling based millisecond timer driver.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Reset the timer configuration. */
  TimerReset();
 8003844:	f000 f814 	bl	8003870 <TimerReset>

  /* Configure the systick frequency as a 1 ms event generator. */
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <TimerInit+0x24>)
 800384a:	4a07      	ldr	r2, [pc, #28]	; (8003868 <TimerInit+0x28>)
 800384c:	605a      	str	r2, [r3, #4]
  /* Reset the current counter value. */
  SysTick->VAL = 0;
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <TimerInit+0x24>)
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
  /* Select core clock as source and enable the timer. */
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <TimerInit+0x24>)
 8003856:	2205      	movs	r2, #5
 8003858:	601a      	str	r2, [r3, #0]
  /* Reset the millisecond counter value. */
  millisecond_counter = 0;
 800385a:	4b04      	ldr	r3, [pc, #16]	; (800386c <TimerInit+0x2c>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	e000e010 	.word	0xe000e010
 8003868:	0002903f 	.word	0x0002903f
 800386c:	20000538 	.word	0x20000538

08003870 <TimerReset>:
**            configuration.
** \return    none.
**
****************************************************************************************/
void TimerReset(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* Set the systick's registers back into the default reset value. */
  SysTick->CTRL = 0;
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <TimerReset+0x20>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <TimerReset+0x20>)
 800387c:	2200      	movs	r2, #0
 800387e:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <TimerReset+0x20>)
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
} /* end of TimerReset */
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e010 	.word	0xe000e010

08003894 <TimerUpdate>:
** \brief     Updates the millisecond timer.
** \return    none.
**
****************************************************************************************/
void TimerUpdate(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8003898:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <TimerUpdate+0x24>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <TimerUpdate+0x1a>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <TimerUpdate+0x28>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a04      	ldr	r2, [pc, #16]	; (80038bc <TimerUpdate+0x28>)
 80038ac:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000e010 	.word	0xe000e010
 80038bc:	20000538 	.word	0x20000538

080038c0 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 80038c4:	f7ff ffe6 	bl	8003894 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
 80038c8:	4b01      	ldr	r3, [pc, #4]	; (80038d0 <TimerGet+0x10>)
 80038ca:	681b      	ldr	r3, [r3, #0]
} /*** end of TimerGet ***/
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000538 	.word	0x20000538

080038d4 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 80038d8:	f7ff fff2 	bl	80038c0 <TimerGet>
 80038dc:	4603      	mov	r3, r0
} /*** end of HAL_GetTick ***/
 80038de:	4618      	mov	r0, r3
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 80038ec:	f000 f919 	bl	8003b22 <CopService>
 80038f0:	e7fc      	b.n	80038ec <AssertFailure+0xa>
	...

080038f4 <BackDoorInit>:
** \brief     Initializes the backdoor entry option.
** \return    none
**
****************************************************************************************/
void BackDoorInit(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
    FileHandleFirmwareUpdateRequest();
  }
#endif
#else
  /* open the backdoor after a reset */
  backdoorOpen = BLT_TRUE;
 80038f8:	4b04      	ldr	r3, [pc, #16]	; (800390c <BackDoorInit+0x18>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 80038fe:	f000 f82d 	bl	800395c <BackDoorRestartTimer>
#endif
  /* perform the first check that open/closes the backdoor */
  BackDoorCheck();
 8003902:	f000 f805 	bl	8003910 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	2000053c 	.word	0x2000053c

08003910 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8003914:	f000 f8ee 	bl	8003af4 <ComIsConnected>
 8003918:	4603      	mov	r3, r0
 800391a:	2b01      	cmp	r3, #1
 800391c:	d015      	beq.n	800394a <BackDoorCheck+0x3a>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <BackDoorCheck+0x40>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d112      	bne.n	800394c <BackDoorCheck+0x3c>
  {
    /* check if the backdoor entry time window elapsed */
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8003926:	f7ff ffcb 	bl	80038c0 <TimerGet>
 800392a:	4601      	mov	r1, r0
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <BackDoorCheck+0x44>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <BackDoorCheck+0x48>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4413      	add	r3, r2
 8003936:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800393a:	4299      	cmp	r1, r3
 800393c:	d306      	bcc.n	800394c <BackDoorCheck+0x3c>
    {
      /* close the backdoor */
      backdoorOpen = BLT_FALSE;
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <BackDoorCheck+0x40>)
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
#endif
      {
        /* no firmware update requests detected, so attempt to start the user program.
         * this function does not return if a valid user program is present.
         */
        CpuStartUserProgram();
 8003944:	f7ff fa1a 	bl	8002d7c <CpuStartUserProgram>
 8003948:	e000      	b.n	800394c <BackDoorCheck+0x3c>
    return;
 800394a:	bf00      	nop
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	2000053c 	.word	0x2000053c
 8003954:	20000544 	.word	0x20000544
 8003958:	20000540 	.word	0x20000540

0800395c <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <BackDoorRestartTimer+0x1c>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d104      	bne.n	8003972 <BackDoorRestartTimer+0x16>
  {
    backdoorOpenTime = TimerGet();
 8003968:	f7ff ffaa 	bl	80038c0 <TimerGet>
 800396c:	4603      	mov	r3, r0
 800396e:	4a03      	ldr	r2, [pc, #12]	; (800397c <BackDoorRestartTimer+0x20>)
 8003970:	6013      	str	r3, [r2, #0]
  }
} /*** end of BackDoorRestartTimer ***/
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	2000053c 	.word	0x2000053c
 800397c:	20000540 	.word	0x20000540

08003980 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* initialize the CPU */
  CpuInit();
 8003984:	f7ff f9f4 	bl	8002d70 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8003988:	f000 f8c5 	bl	8003b16 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 800398c:	f7ff ff58 	bl	8003840 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8003990:	f7ff fdbe 	bl	8003510 <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8003994:	f000 f810 	bl	80039b8 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8003998:	f7ff ffac 	bl	80038f4 <BackDoorInit>
} /*** end of BootInit ***/
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}

080039a0 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* service the watchdog */
  CopService();
 80039a4:	f000 f8bd 	bl	8003b22 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 80039a8:	f7ff ff74 	bl	8003894 <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 80039ac:	f000 f812 	bl	80039d4 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 80039b0:	f7ff ffae 	bl	8003910 <BackDoorCheck>
} /*** end of BootTask ***/
 80039b4:	bf00      	nop
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* initialize the XCP communication protocol */
  XcpInit();
 80039bc:	f000 f8b8 	bl	8003b30 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 80039c0:	f7ff fe48 	bl	8003654 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 80039c4:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <ComInit+0x18>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000009 	.word	0x20000009

080039d4 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 80039da:	1dfb      	adds	r3, r7, #7
 80039dc:	4619      	mov	r1, r3
 80039de:	4809      	ldr	r0, [pc, #36]	; (8003a04 <ComTask+0x30>)
 80039e0:	f7ff fe88 	bl	80036f4 <Rs232ReceivePacket>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d107      	bne.n	80039fa <ComTask+0x26>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_RS232;
 80039ea:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <ComTask+0x34>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	4619      	mov	r1, r3
 80039f4:	4803      	ldr	r0, [pc, #12]	; (8003a04 <ComTask+0x30>)
 80039f6:	f000 f8dd 	bl	8003bb4 <XcpPacketReceived>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000548 	.word	0x20000548
 8003a08:	20000009 	.word	0x20000009

08003a0c <ComFree>:
** \brief     Releases the communication module.
** \return    none
**
****************************************************************************************/
void ComFree(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <ComTransmitPacket+0x2c>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <ComTransmitPacket+0x20>
  {
    Rs232TransmitPacket(data, (blt_int8u)len);
 8003a30:	887b      	ldrh	r3, [r7, #2]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	4619      	mov	r1, r3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fe30 	bl	800369c <Rs232TransmitPacket>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8003a3c:	f000 f8ac 	bl	8003b98 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000009 	.word	0x20000009

08003a4c <ComGetActiveInterfaceMaxRxLen>:
**            communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <ComGetActiveInterfaceMaxRxLen+0x50>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d816      	bhi.n	8003a88 <ComGetActiveInterfaceMaxRxLen+0x3c>
 8003a5a:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <ComGetActiveInterfaceMaxRxLen+0x14>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003a77 	.word	0x08003a77
 8003a68:	08003a7d 	.word	0x08003a7d
 8003a6c:	08003a83 	.word	0x08003a83
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 8003a70:	2381      	movs	r3, #129	; 0x81
 8003a72:	80fb      	strh	r3, [r7, #6]
      break;
 8003a74:	e00b      	b.n	8003a8e <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8003a76:	2308      	movs	r3, #8
 8003a78:	80fb      	strh	r3, [r7, #6]
      break;
 8003a7a:	e008      	b.n	8003a8e <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 8003a7c:	233f      	movs	r3, #63	; 0x3f
 8003a7e:	80fb      	strh	r3, [r7, #6]
      break;
 8003a80:	e005      	b.n	8003a8e <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 8003a82:	2300      	movs	r3, #0
 8003a84:	80fb      	strh	r3, [r7, #6]
      break;
 8003a86:	e002      	b.n	8003a8e <ComGetActiveInterfaceMaxRxLen+0x42>

    default:
      result = BOOT_COM_RX_MAX_DATA;
 8003a88:	2381      	movs	r3, #129	; 0x81
 8003a8a:	80fb      	strh	r3, [r7, #6]
      break;
 8003a8c:	bf00      	nop
  }

  return result;
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	20000009 	.word	0x20000009

08003aa0 <ComGetActiveInterfaceMaxTxLen>:
**            specified communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8003aa6:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <ComGetActiveInterfaceMaxTxLen+0x50>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d816      	bhi.n	8003adc <ComGetActiveInterfaceMaxTxLen+0x3c>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <ComGetActiveInterfaceMaxTxLen+0x14>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003acb 	.word	0x08003acb
 8003abc:	08003ad1 	.word	0x08003ad1
 8003ac0:	08003ad7 	.word	0x08003ad7
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 8003ac4:	2381      	movs	r3, #129	; 0x81
 8003ac6:	80fb      	strh	r3, [r7, #6]
      break;
 8003ac8:	e00b      	b.n	8003ae2 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 8003aca:	2308      	movs	r3, #8
 8003acc:	80fb      	strh	r3, [r7, #6]
      break;
 8003ace:	e008      	b.n	8003ae2 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 8003ad0:	233f      	movs	r3, #63	; 0x3f
 8003ad2:	80fb      	strh	r3, [r7, #6]
      break;
 8003ad4:	e005      	b.n	8003ae2 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	80fb      	strh	r3, [r7, #6]
      break;
 8003ada:	e002      	b.n	8003ae2 <ComGetActiveInterfaceMaxTxLen+0x42>

    default:
      result = BOOT_COM_TX_MAX_DATA;
 8003adc:	2381      	movs	r3, #129	; 0x81
 8003ade:	80fb      	strh	r3, [r7, #6]
      break;
 8003ae0:	bf00      	nop
  }

  return result;
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	20000009 	.word	0x20000009

08003af4 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
  blt_bool result = BLT_FALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	71fb      	strb	r3, [r7, #7]

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 8003afe:	f000 f839 	bl	8003b74 <XcpIsConnected>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <ComIsConnected+0x18>
  {
    result = BLT_TRUE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	71fb      	strb	r3, [r7, #7]
  {
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
} /*** end of ComIsConnected ***/
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8003b1a:	f7fc fd07 	bl	800052c <CopInitHook>
#endif
} /*** end of CopInit ***/
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 8003b26:	f7fc fd08 	bl	800053a <CopServiceHook>
#endif
} /*** end of CopService ***/
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <XcpInit>:
** \brief     Initializes the XCP driver. Should be called once upon system startup.
** \return    none
**
****************************************************************************************/
void XcpInit(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* reset xcp module info */
  xcpInfo.connected = 0;
 8003b34:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <XcpInit+0x40>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  xcpInfo.mta = 0;
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <XcpInit+0x40>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  xcpInfo.ctoPending = 0;
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <XcpInit+0x40>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  xcpInfo.ctoLen = 0;
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <XcpInit+0x40>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  xcpInfo.s_n_k_resource = 0;
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <XcpInit+0x40>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  xcpInfo.protection = 0;
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <XcpInit+0x40>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
} /*** end of XcpInit ***/
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	200005cc 	.word	0x200005cc

08003b74 <XcpIsConnected>:
** \brief     Obtains information about the XCP connection state.
** \return    BLT_TRUE is an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool XcpIsConnected(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  if (xcpInfo.connected == 0)
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <XcpIsConnected+0x20>)
 8003b7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <XcpIsConnected+0x12>
  {
    return BLT_FALSE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <XcpIsConnected+0x14>
  }
  return BLT_TRUE;
 8003b86:	2301      	movs	r3, #1
} /*** end of XcpIsConnected ***/
 8003b88:	4618      	mov	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	200005cc 	.word	0x200005cc

08003b98 <XcpPacketTransmitted>:
**            the transport layer.
** \return    none
**
****************************************************************************************/
void XcpPacketTransmitted(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  /* reset packet transmission pending flag */
  xcpInfo.ctoPending = 0;
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <XcpPacketTransmitted+0x18>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
} /*** end of XcpPacketTransmitted ***/
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	200005cc 	.word	0x200005cc

08003bb4 <XcpPacketReceived>:
** \param     len Number of bytes in the packet.
** \return    none
**
****************************************************************************************/
void XcpPacketReceived(blt_int8u *data, blt_int8u len)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	70fb      	strb	r3, [r7, #3]
    /* packet processed by hook function so no need to continue. */
    return;
  }
#endif
  /* was this a connect command? */
  if (data[0] == XCP_CMD_CONNECT)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2bff      	cmp	r3, #255	; 0xff
 8003bc6:	d103      	bne.n	8003bd0 <XcpPacketReceived+0x1c>
  {
    /* process the connect command */
    XcpCmdConnect(data);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f9ab 	bl	8003f24 <XcpCmdConnect>
 8003bce:	e0bf      	b.n	8003d50 <XcpPacketReceived+0x19c>
  }
  /* only continue if connected */
  else if (xcpInfo.connected == 1)
 8003bd0:	4b6e      	ldr	r3, [pc, #440]	; (8003d8c <XcpPacketReceived+0x1d8>)
 8003bd2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	f040 80d3 	bne.w	8003d82 <XcpPacketReceived+0x1ce>
  {
    switch (data[0])
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	3bc9      	subs	r3, #201	; 0xc9
 8003be2:	2b35      	cmp	r3, #53	; 0x35
 8003be4:	f200 80b0 	bhi.w	8003d48 <XcpPacketReceived+0x194>
 8003be8:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <XcpPacketReceived+0x3c>)
 8003bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bee:	bf00      	nop
 8003bf0:	08003d09 	.word	0x08003d09
 8003bf4:	08003d49 	.word	0x08003d49
 8003bf8:	08003d49 	.word	0x08003d49
 8003bfc:	08003d31 	.word	0x08003d31
 8003c00:	08003d49 	.word	0x08003d49
 8003c04:	08003d49 	.word	0x08003d49
 8003c08:	08003d29 	.word	0x08003d29
 8003c0c:	08003d11 	.word	0x08003d11
 8003c10:	08003d21 	.word	0x08003d21
 8003c14:	08003d19 	.word	0x08003d19
 8003c18:	08003d49 	.word	0x08003d49
 8003c1c:	08003d49 	.word	0x08003d49
 8003c20:	08003d49 	.word	0x08003d49
 8003c24:	08003d49 	.word	0x08003d49
 8003c28:	08003d49 	.word	0x08003d49
 8003c2c:	08003d49 	.word	0x08003d49
 8003c30:	08003d49 	.word	0x08003d49
 8003c34:	08003d49 	.word	0x08003d49
 8003c38:	08003d49 	.word	0x08003d49
 8003c3c:	08003d49 	.word	0x08003d49
 8003c40:	08003d49 	.word	0x08003d49
 8003c44:	08003d49 	.word	0x08003d49
 8003c48:	08003d49 	.word	0x08003d49
 8003c4c:	08003d49 	.word	0x08003d49
 8003c50:	08003d49 	.word	0x08003d49
 8003c54:	08003d49 	.word	0x08003d49
 8003c58:	08003d49 	.word	0x08003d49
 8003c5c:	08003d49 	.word	0x08003d49
 8003c60:	08003d49 	.word	0x08003d49
 8003c64:	08003d49 	.word	0x08003d49
 8003c68:	08003d49 	.word	0x08003d49
 8003c6c:	08003d49 	.word	0x08003d49
 8003c70:	08003d49 	.word	0x08003d49
 8003c74:	08003d49 	.word	0x08003d49
 8003c78:	08003d49 	.word	0x08003d49
 8003c7c:	08003d49 	.word	0x08003d49
 8003c80:	08003d49 	.word	0x08003d49
 8003c84:	08003d49 	.word	0x08003d49
 8003c88:	08003d49 	.word	0x08003d49
 8003c8c:	08003d49 	.word	0x08003d49
 8003c90:	08003d49 	.word	0x08003d49
 8003c94:	08003d49 	.word	0x08003d49
 8003c98:	08003ce1 	.word	0x08003ce1
 8003c9c:	08003cd1 	.word	0x08003cd1
 8003ca0:	08003cc9 	.word	0x08003cc9
 8003ca4:	08003cd9 	.word	0x08003cd9
 8003ca8:	08003d41 	.word	0x08003d41
 8003cac:	08003d39 	.word	0x08003d39
 8003cb0:	08003d49 	.word	0x08003d49
 8003cb4:	08003ce9 	.word	0x08003ce9
 8003cb8:	08003d49 	.word	0x08003d49
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003cf9 	.word	0x08003cf9
 8003cc4:	08003d01 	.word	0x08003d01
    {
      case XCP_CMD_UPLOAD:
        XcpCmdUpload(data);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f9f9 	bl	80040c0 <XcpCmdUpload>
        break;
 8003cce:	e03f      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_SHORT_UPLOAD:
        XcpCmdShortUpload(data);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fa41 	bl	8004158 <XcpCmdShortUpload>
        break;
 8003cd6:	e03b      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_SET_MTA:
        XcpCmdSetMta(data);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f9d7 	bl	800408c <XcpCmdSetMta>
        break;
 8003cde:	e037      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_BUILD_CHECKSUM:
        XcpCmdBuildCheckSum(data);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fa8f 	bl	8004204 <XcpCmdBuildCheckSum>
        break;
 8003ce6:	e033      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_GET_ID:
        XcpCmdGetId(data);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f9a7 	bl	800403c <XcpCmdGetId>
        break;
 8003cee:	e02f      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_SYNCH:
        XcpCmdSynch(data);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f997 	bl	8004024 <XcpCmdSynch>
        break;
 8003cf6:	e02b      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_GET_STATUS:
        XcpCmdGetStatus(data);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f96f 	bl	8003fdc <XcpCmdGetStatus>
        break;
 8003cfe:	e027      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_DISCONNECT:
        XcpCmdDisconnect(data);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f953 	bl	8003fac <XcpCmdDisconnect>
        break;
 8003d06:	e023      	b.n	8003d50 <XcpPacketReceived+0x19c>
        XcpCmdDownloadMax(data);
        break;
#endif
#if (XCP_RES_PROGRAMMING_EN == 1)
      case XCP_CMD_PROGRAM_MAX:
        XcpCmdProgramMax(data);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fc65 	bl	80045d8 <XcpCmdProgramMax>
        break;
 8003d0e:	e01f      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_PROGRAM:
        XcpCmdProgram(data);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fc9d 	bl	8004650 <XcpCmdProgram>
        break;
 8003d16:	e01b      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_PROGRAM_START:
        XcpCmdProgramStart(data);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fc2d 	bl	8004578 <XcpCmdProgramStart>
        break;
 8003d1e:	e017      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_PROGRAM_CLEAR:
        XcpCmdProgramClear(data);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fceb 	bl	80046fc <XcpCmdProgramClear>
        break;
 8003d26:	e013      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_PROGRAM_RESET:
        XcpCmdProgramReset(data);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fd17 	bl	800475c <XcpCmdProgramReset>
        break;
 8003d2e:	e00f      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_PROGRAM_PREPARE:
        XcpCmdProgramPrepare(data);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fd31 	bl	8004798 <XcpCmdProgramPrepare>
        break;
 8003d36:	e00b      	b.n	8003d50 <XcpPacketReceived+0x19c>
#endif
#if (XCP_SEED_KEY_PROTECTION_EN == 1)
      case XCP_CMD_GET_SEED:
        XcpCmdGetSeed(data);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fa97 	bl	800426c <XcpCmdGetSeed>
        break;
 8003d3e:	e007      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_UNLOCK:
        XcpCmdUnlock(data);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fb75 	bl	8004430 <XcpCmdUnlock>
        break;
 8003d46:	e003      	b.n	8003d50 <XcpPacketReceived+0x19c>
      case XCP_CMD_GET_CAL_PAGE:
        XcpCmdGetCalPage(data);
        break;
#endif
      default:
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8003d48:	2020      	movs	r0, #32
 8003d4a:	f000 f889 	bl	8003e60 <XcpSetCtoError>
        break;
 8003d4e:	bf00      	nop
    /* return to make sure response packet is not send because we are not connected */
    return;
  }

  /* make sure the previous command was completed */
  if (xcpInfo.ctoPending == 1)
 8003d50:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <XcpPacketReceived+0x1d8>)
 8003d52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d102      	bne.n	8003d60 <XcpPacketReceived+0x1ac>
  {
    /* command overrun occurred */
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 8003d5a:	2010      	movs	r0, #16
 8003d5c:	f000 f880 	bl	8003e60 <XcpSetCtoError>
  }

  /* send the response if it contains something */
  if (xcpInfo.ctoLen > 0)
 8003d60:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <XcpPacketReceived+0x1d8>)
 8003d62:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	dd0c      	ble.n	8003d84 <XcpPacketReceived+0x1d0>
  {
    /* set cto packet transmission pending flag */
    xcpInfo.ctoPending = 1;
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <XcpPacketReceived+0x1d8>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* transmit the cto response packet */
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <XcpPacketReceived+0x1d8>)
 8003d74:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4804      	ldr	r0, [pc, #16]	; (8003d8c <XcpPacketReceived+0x1d8>)
 8003d7c:	f000 f808 	bl	8003d90 <XcpTransmitPacket>
 8003d80:	e000      	b.n	8003d84 <XcpPacketReceived+0x1d0>
    return;
 8003d82:	bf00      	nop
  }
} /*** end of XcpPacketReceived ***/
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	200005cc 	.word	0x200005cc

08003d90 <XcpTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
static void XcpTransmitPacket(blt_int8u *data, blt_int16s len)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
  /* submit packet to the communication interface for transmission */
#if (BOOT_COM_ENABLE == 0)
  XcpTransmitPacketHook(data, len);
#else
  ComTransmitPacket(data, len);
 8003d9c:	887b      	ldrh	r3, [r7, #2]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fe3b 	bl	8003a1c <ComTransmitPacket>
#endif

} /*** end of XcpTransmitPacket ***/
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <XcpComputeChecksum>:
** \return    Checksum type that was used during the checksum calculation.
**
****************************************************************************************/
static blt_int8u XcpComputeChecksum(blt_int32u address, blt_int32u length,
                                    blt_int32u *checksum)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
  blt_int8u cs = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]

  /* this example computes the checksum using the add byte to byte algorithm */
  while (length-- > 0)
 8003dbe:	e009      	b.n	8003dd4 <XcpComputeChecksum+0x26>
  {
    /* add the next byte value */
    cs += *((blt_int8u *)(blt_addr)address);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	75fb      	strb	r3, [r7, #23]
    /* increment address */
    address++;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
    /* service the watchdog */
    CopService();
 8003dd0:	f7ff fea7 	bl	8003b22 <CopService>
  while (length-- > 0)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1e5a      	subs	r2, r3, #1
 8003dd8:	60ba      	str	r2, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <XcpComputeChecksum+0x12>
  }
  /* store the computed checksum value */
  *checksum = cs;
 8003dde:	7dfa      	ldrb	r2, [r7, #23]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	601a      	str	r2, [r3, #0]
  /* inform the caller of the uses checksum computation algorithm */
  return XCP_CS_ADD11;
 8003de4:	2301      	movs	r3, #1
} /*** end of XcpComputeChecksum ***/
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <XcpGetSeed>:
** \param     seed      Pointer to byte buffer wher the seed will be stored.
** \return    Length of the seed in bytes.
**
****************************************************************************************/
static blt_int8u XcpGetSeed(blt_int8u resource, blt_int8u *seed)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	6039      	str	r1, [r7, #0]
 8003df8:	71fb      	strb	r3, [r7, #7]
  /* pass request on to the application through a hook function */
  return XcpGetSeedHook(resource, seed);
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	6839      	ldr	r1, [r7, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc fba1 	bl	8000546 <XcpGetSeedHook>
 8003e04:	4603      	mov	r3, r0
} /*** end of XcpGetSeed ***/
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <XcpVerifyKey>:
** \param     len       length of the key in bytes.
** \return    1 if the key was correct, 0 otherwise.
**
****************************************************************************************/
static blt_int8u XcpVerifyKey(blt_int8u resource, blt_int8u *key, blt_int8u len)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	4603      	mov	r3, r0
 8003e16:	6039      	str	r1, [r7, #0]
 8003e18:	71fb      	strb	r3, [r7, #7]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	71bb      	strb	r3, [r7, #6]
  /* pass request on to the application through a hook function */
  return XcpVerifyKeyHook(resource, key, len);
 8003e1e:	79ba      	ldrb	r2, [r7, #6]
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	6839      	ldr	r1, [r7, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc fba3 	bl	8000570 <XcpVerifyKeyHook>
 8003e2a:	4603      	mov	r3, r0
} /*** end of XcpVerifyKey ***/
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <XcpProtectResources>:
** \brief     Utility function to protects all the available resources.
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  xcpInfo.protection = 0;
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <XcpProtectResources+0x28>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.protection |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.protection |= XCP_RES_PGM;
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <XcpProtectResources+0x28>)
 8003e42:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003e46:	f043 0310 	orr.w	r3, r3, #16
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <XcpProtectResources+0x28>)
 8003e4e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 8003e52:	bf00      	nop
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	200005cc 	.word	0x200005cc

08003e60 <XcpSetCtoError>:
** \param     error XCP error code (XCP_ERR_XXX).
** \return    none
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <XcpSetCtoError+0x2c>)
 8003e6c:	22fe      	movs	r2, #254	; 0xfe
 8003e6e:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoData[1] = error;
 8003e70:	4a06      	ldr	r2, [pc, #24]	; (8003e8c <XcpSetCtoError+0x2c>)
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	7053      	strb	r3, [r2, #1]
  xcpInfo.ctoLen = 2;
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <XcpSetCtoError+0x2c>)
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpSetCtoError ***/
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	200005cc 	.word	0x200005cc

08003e90 <XcpGetOrderedLong>:
** \param     data Array to the buffer with the 32-bit value stored as bytes.
** \return    The 32-bit value.
**
****************************************************************************************/
static blt_int32u XcpGetOrderedLong(blt_int8u const * data)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  blt_int32u result = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]

#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  result |= (blt_int32u)data[0];
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[1] << 8);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 16);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3302      	adds	r3, #2
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[3] << 24);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3303      	adds	r3, #3
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	061b      	lsls	r3, r3, #24
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 8);
  result |= (blt_int32u)((blt_int32u)data[1] << 16);
  result |= (blt_int32u)((blt_int32u)data[0] << 24);
#endif
  /* Give the result back to the caller. */
  return result;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
} /*** end of XcpGetOrderedLong ***/
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <XcpSetOrderedLong>:
** \param     value The 32-bit value to store in the buffer.
** \param     data Array to the buffer for storage.
**
****************************************************************************************/
static void XcpSetOrderedLong(blt_int32u value, blt_int8u *data)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  data[0] = (blt_int8u) value;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	701a      	strb	r2, [r3, #0]
  data[1] = (blt_int8u)(value >>  8);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0a1a      	lsrs	r2, r3, #8
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]
  data[2] = (blt_int8u)(value >> 16);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	0c1a      	lsrs	r2, r3, #16
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	3302      	adds	r3, #2
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u)(value >> 24);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	0e1a      	lsrs	r2, r3, #24
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	3303      	adds	r3, #3
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u) value;
  data[2] = (blt_int8u)(value >>  8);
  data[1] = (blt_int8u)(value >> 16);
  data[0] = (blt_int8u)(value >> 24);
#endif
} /*** end of XcpSetOrderedLong ***/
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <XcpCmdConnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdConnect(blt_int8u *data)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* enable resource protection */
  XcpProtectResources();
 8003f2c:	f7ff ff82 	bl	8003e34 <XcpProtectResources>

  /* indicate that the connection is established */
  xcpInfo.connected = 1;
 8003f30:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f3a:	22ff      	movs	r2, #255	; 0xff
 8003f3c:	701a      	strb	r2, [r3, #0]

  /* report available resources */
  xcpInfo.ctoData[1] = 0;
 8003f3e:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 8003f44:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f46:	785b      	ldrb	r3, [r3, #1]
 8003f48:	f043 0310 	orr.w	r3, r3, #16
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f50:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	709a      	strb	r2, [r3, #2]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f5a:	789a      	ldrb	r2, [r3, #2]
 8003f5c:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f5e:	709a      	strb	r2, [r3, #2]

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8003f60:	f7ff fd74 	bl	8003a4c <ComGetActiveInterfaceMaxRxLen>
 8003f64:	4603      	mov	r3, r0
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f6a:	70da      	strb	r2, [r3, #3]

  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 8003f6c:	f7ff fd98 	bl	8003aa0 <ComGetActiveInterfaceMaxTxLen>
 8003f70:	4603      	mov	r3, r0
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f76:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8003f78:	f7ff fd92 	bl	8003aa0 <ComGetActiveInterfaceMaxTxLen>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f86:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[4] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
  xcpInfo.ctoData[5] = (blt_int8u)XCP_DTO_PACKET_LEN;
#endif

  /* report msb of protocol layer version number */
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	719a      	strb	r2, [r3, #6]

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	71da      	strb	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <XcpCmdConnect+0x84>)
 8003f96:	2208      	movs	r2, #8
 8003f98:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 8003f9c:	f7ff fab8 	bl	8003510 <NvmInit>
} /*** end of XcpCmdConnect ***/
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	200005cc 	.word	0x200005cc

08003fac <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8003fb4:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <XcpCmdDisconnect+0x2c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* enable resource protection */
  XcpProtectResources();
 8003fbc:	f7ff ff3a 	bl	8003e34 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <XcpCmdDisconnect+0x2c>)
 8003fc2:	22ff      	movs	r2, #255	; 0xff
 8003fc4:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8003fc6:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <XcpCmdDisconnect+0x2c>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdDisconnect ***/
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	200005cc 	.word	0x200005cc

08003fdc <XcpCmdGetStatus>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetStatus(blt_int8u *data)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <XcpCmdGetStatus+0x44>)
 8003fe6:	22ff      	movs	r2, #255	; 0xff
 8003fe8:	701a      	strb	r2, [r3, #0]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 8003fea:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <XcpCmdGetStatus+0x44>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	705a      	strb	r2, [r3, #1]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <XcpCmdGetStatus+0x44>)
 8003ff2:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <XcpCmdGetStatus+0x44>)
 8003ff8:	709a      	strb	r2, [r3, #2]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <XcpCmdGetStatus+0x44>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[4] = 0;
 8004000:	4b07      	ldr	r3, [pc, #28]	; (8004020 <XcpCmdGetStatus+0x44>)
 8004002:	2200      	movs	r2, #0
 8004004:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <XcpCmdGetStatus+0x44>)
 8004008:	2200      	movs	r2, #0
 800400a:	715a      	strb	r2, [r3, #5]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <XcpCmdGetStatus+0x44>)
 800400e:	2206      	movs	r2, #6
 8004010:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdGetStatus ***/
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	200005cc 	.word	0x200005cc

08004024 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 800402c:	2000      	movs	r0, #0
 800402e:	f7ff ff17 	bl	8003e60 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <XcpCmdGetId>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetId(blt_int8u *data)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004044:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <XcpCmdGetId+0x44>)
 8004046:	22ff      	movs	r2, #255	; 0xff
 8004048:	701a      	strb	r2, [r3, #0]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 800404a:	4a0e      	ldr	r2, [pc, #56]	; (8004084 <XcpCmdGetId+0x48>)
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <XcpCmdGetId+0x44>)
 800404e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <XcpCmdGetId+0x44>)
 8004054:	2200      	movs	r2, #0
 8004056:	705a      	strb	r2, [r3, #1]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <XcpCmdGetId+0x44>)
 800405a:	2200      	movs	r2, #0
 800405c:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <XcpCmdGetId+0x44>)
 8004060:	2200      	movs	r2, #0
 8004062:	70da      	strb	r2, [r3, #3]

  /* store station id length (excl. null termination) for response packet */
  stationIdLen = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 8004064:	2307      	movs	r3, #7
 8004066:	60fb      	str	r3, [r7, #12]
  XcpSetOrderedLong(stationIdLen, &xcpInfo.ctoData[4]);
 8004068:	4907      	ldr	r1, [pc, #28]	; (8004088 <XcpCmdGetId+0x4c>)
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f7ff ff38 	bl	8003ee0 <XcpSetOrderedLong>

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <XcpCmdGetId+0x44>)
 8004072:	2208      	movs	r2, #8
 8004074:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdGetId ***/
 8004078:	bf00      	nop
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	200005cc 	.word	0x200005cc
 8004084:	08004920 	.word	0x08004920
 8004088:	200005d0 	.word	0x200005d0

0800408c <XcpCmdSetMta>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <XcpCmdSetMta+0x30>)
 8004096:	22ff      	movs	r2, #255	; 0xff
 8004098:	701a      	strb	r2, [r3, #0]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fef6 	bl	8003e90 <XcpGetOrderedLong>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4a05      	ldr	r2, [pc, #20]	; (80040bc <XcpCmdSetMta+0x30>)
 80040a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80040ac:	4b03      	ldr	r3, [pc, #12]	; (80040bc <XcpCmdSetMta+0x30>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdSetMta ***/
 80040b4:	bf00      	nop
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	200005cc 	.word	0x200005cc

080040c0 <XcpCmdUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUpload(blt_int8u *data)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 80040c8:	f7ff fcc0 	bl	8003a4c <ComGetActiveInterfaceMaxRxLen>
 80040cc:	4603      	mov	r3, r0
 80040ce:	461a      	mov	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3301      	adds	r3, #1
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	429a      	cmp	r2, r3
 80040da:	d803      	bhi.n	80040e4 <XcpCmdUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80040dc:	2022      	movs	r0, #34	; 0x22
 80040de:	f7ff febf 	bl	8003e60 <XcpSetCtoError>
    return;
 80040e2:	e032      	b.n	800414a <XcpCmdUpload+0x8a>
  }

  /* read out the length of the requested upload operation */
  len = data[1];
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3301      	adds	r3, #1
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 80040ec:	4b18      	ldr	r3, [pc, #96]	; (8004150 <XcpCmdUpload+0x90>)
 80040ee:	60bb      	str	r3, [r7, #8]
   * situation. The deviation is such that all zero values are returned if the seed/key
   * security feature is enabled and the programming resource is not yet unlocked.
   */
  #if (XCP_SEED_KEY_PROTECTION_EN == 1)
  /* check if PGM resource is unlocked */
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 80040f0:	4b18      	ldr	r3, [pc, #96]	; (8004154 <XcpCmdUpload+0x94>)
 80040f2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d006      	beq.n	800410c <XcpCmdUpload+0x4c>
  {
    /* resource is locked so memory read access is denied. zero values are returned
     * instead.
     */
    CpuMemSet((blt_addr)destPtr, 0, len);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	89fa      	ldrh	r2, [r7, #14]
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe fe89 	bl	8002e1c <CpuMemSet>
 800410a:	e007      	b.n	800411c <XcpCmdUpload+0x5c>
  }
  else
  {
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4a11      	ldr	r2, [pc, #68]	; (8004154 <XcpCmdUpload+0x94>)
 8004110:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8004114:	89fa      	ldrh	r2, [r7, #14]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe fe60 	bl	8002ddc <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800411c:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <XcpCmdUpload+0x94>)
 800411e:	22ff      	movs	r2, #255	; 0xff
 8004120:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8004122:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <XcpCmdUpload+0x94>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	3201      	adds	r2, #1
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	4413      	add	r3, r2
 8004130:	4a08      	ldr	r2, [pc, #32]	; (8004154 <XcpCmdUpload+0x94>)
 8004132:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3301      	adds	r3, #1
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	3301      	adds	r3, #1
 8004140:	b29b      	uxth	r3, r3
 8004142:	b21a      	sxth	r2, r3
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <XcpCmdUpload+0x94>)
 8004146:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdUpload ***/
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200005cd 	.word	0x200005cd
 8004154:	200005cc 	.word	0x200005cc

08004158 <XcpCmdShortUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdShortUpload(blt_int8u *data)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8004160:	f7ff fc74 	bl	8003a4c <ComGetActiveInterfaceMaxRxLen>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3301      	adds	r3, #1
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	429a      	cmp	r2, r3
 8004172:	d803      	bhi.n	800417c <XcpCmdShortUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8004174:	2022      	movs	r0, #34	; 0x22
 8004176:	f7ff fe73 	bl	8003e60 <XcpSetCtoError>
    return;
 800417a:	e03b      	b.n	80041f4 <XcpCmdShortUpload+0x9c>
  }

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fe85 	bl	8003e90 <XcpGetOrderedLong>
 8004186:	4603      	mov	r3, r0
 8004188:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <XcpCmdShortUpload+0xa4>)
 800418a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* read out the length of the requested upload operation */
  len = data[1];
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3301      	adds	r3, #1
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <XcpCmdShortUpload+0xa8>)
 8004198:	60bb      	str	r3, [r7, #8]
   * situation. The deviation is such that all zero values are returned if the seed/key
   * security feature is enabled and the programming resource is not yet unlocked.
   */
  #if (XCP_SEED_KEY_PROTECTION_EN == 1)
  /* check if PGM resource is unlocked */
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 800419a:	4b18      	ldr	r3, [pc, #96]	; (80041fc <XcpCmdShortUpload+0xa4>)
 800419c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d006      	beq.n	80041b6 <XcpCmdShortUpload+0x5e>
  {
    /* resource is locked so memory read access is denied. zero values are returned
     * instead.
     */
    CpuMemSet((blt_addr)destPtr, 0, len);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	89fa      	ldrh	r2, [r7, #14]
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe fe34 	bl	8002e1c <CpuMemSet>
 80041b4:	e007      	b.n	80041c6 <XcpCmdShortUpload+0x6e>
  }
  else
  {
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4a10      	ldr	r2, [pc, #64]	; (80041fc <XcpCmdShortUpload+0xa4>)
 80041ba:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80041be:	89fa      	ldrh	r2, [r7, #14]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe fe0b 	bl	8002ddc <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80041c6:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <XcpCmdShortUpload+0xa4>)
 80041c8:	22ff      	movs	r2, #255	; 0xff
 80041ca:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <XcpCmdShortUpload+0xa4>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	3201      	adds	r2, #1
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	4413      	add	r3, r2
 80041da:	4a08      	ldr	r2, [pc, #32]	; (80041fc <XcpCmdShortUpload+0xa4>)
 80041dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3301      	adds	r3, #1
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3301      	adds	r3, #1
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	b21a      	sxth	r2, r3
 80041ee:	4b03      	ldr	r3, [pc, #12]	; (80041fc <XcpCmdShortUpload+0xa4>)
 80041f0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdShortUpload ***/
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	200005cc 	.word	0x200005cc
 8004200:	200005cd 	.word	0x200005cd

08004204 <XcpCmdBuildCheckSum>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdBuildCheckSum(blt_int8u *data)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  blt_int32u checksumLen;
  blt_int32u checksumVal = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  blt_int8u  checksumType;
  
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004210:	4b14      	ldr	r3, [pc, #80]	; (8004264 <XcpCmdBuildCheckSum+0x60>)
 8004212:	22ff      	movs	r2, #255	; 0xff
 8004214:	701a      	strb	r2, [r3, #0]

  /* obtain checksum and checksum type */
  checksumLen = XcpGetOrderedLong(&data[4]);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3304      	adds	r3, #4
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fe38 	bl	8003e90 <XcpGetOrderedLong>
 8004220:	6178      	str	r0, [r7, #20]
  checksumType = XcpComputeChecksum(xcpInfo.mta, checksumLen, &checksumVal);
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <XcpCmdBuildCheckSum+0x60>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f107 020c 	add.w	r2, r7, #12
 800422c:	6979      	ldr	r1, [r7, #20]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fdbd 	bl	8003dae <XcpComputeChecksum>
 8004234:	4603      	mov	r3, r0
 8004236:	74fb      	strb	r3, [r7, #19]
  xcpInfo.ctoData[1] = checksumType;
 8004238:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <XcpCmdBuildCheckSum+0x60>)
 800423a:	7cfb      	ldrb	r3, [r7, #19]
 800423c:	7053      	strb	r3, [r2, #1]
  XcpSetOrderedLong(checksumVal, &xcpInfo.ctoData[4]);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4909      	ldr	r1, [pc, #36]	; (8004268 <XcpCmdBuildCheckSum+0x64>)
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fe4c 	bl	8003ee0 <XcpSetOrderedLong>

  /* initialize reserved parameters */
  xcpInfo.ctoData[2] = 0;
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <XcpCmdBuildCheckSum+0x60>)
 800424a:	2200      	movs	r2, #0
 800424c:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <XcpCmdBuildCheckSum+0x60>)
 8004250:	2200      	movs	r2, #0
 8004252:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8004254:	4b03      	ldr	r3, [pc, #12]	; (8004264 <XcpCmdBuildCheckSum+0x60>)
 8004256:	2208      	movs	r2, #8
 8004258:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdBuildCheckSum ***/
 800425c:	bf00      	nop
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	200005cc 	.word	0x200005cc
 8004268:	200005d0 	.word	0x200005d0

0800426c <XcpCmdGetSeed>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetSeed(blt_int8u *data)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  static blt_int8u *seedCurrentPtr;
  static blt_bool sequenceInProgress = BLT_FALSE;
  blt_int8u seedCurrentLen;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004274:	4b67      	ldr	r3, [pc, #412]	; (8004414 <XcpCmdGetSeed+0x1a8>)
 8004276:	22ff      	movs	r2, #255	; 0xff
 8004278:	701a      	strb	r2, [r3, #0]

  /* validate requested resource in case the mode flag equals 0 */
  if (data[1] == 0)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3301      	adds	r3, #1
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d15f      	bne.n	8004344 <XcpCmdGetSeed+0xd8>
  {
    /* init resource check variable as if an illegal resource is requested */
    resourceOK = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]

    /* check if calibration/paging resource is requested for seed/key and make
     * sure this is the only requested resource
     */
    if (((data[2] & XCP_RES_CALPAG) > 0) && ((data[2] & ~XCP_RES_CALPAG) == 0))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3302      	adds	r3, #2
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	dd08      	ble.n	80042a8 <XcpCmdGetSeed+0x3c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3302      	adds	r3, #2
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <XcpCmdGetSeed+0x3c>
    {
      resourceOK = 1;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
    }

    /* check if programming resource is requested for seed/key and make
     * sure this is the only requested resource
     */
    if (((data[2] & XCP_RES_PGM) > 0) && ((data[2] & ~XCP_RES_PGM) == 0))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3302      	adds	r3, #2
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	dd08      	ble.n	80042c8 <XcpCmdGetSeed+0x5c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3302      	adds	r3, #2
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	f023 0310 	bic.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <XcpCmdGetSeed+0x5c>
    {
      resourceOK = 1;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
    }

    /* check if data acquisition resource is requested for seed/key and make
     * sure this is the only requested resource
     */
    if (((data[2] & XCP_RES_DAQ) > 0) && ((data[2] & ~XCP_RES_DAQ) == 0))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3302      	adds	r3, #2
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	dd08      	ble.n	80042e8 <XcpCmdGetSeed+0x7c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3302      	adds	r3, #2
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <XcpCmdGetSeed+0x7c>
    {
      resourceOK = 1;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
    }

    /* check if data stimulation resource is requested for seed/key and make
     * sure this is the only requested resource
     */
    if (((data[2] & XCP_RES_STIM) > 0) && ((data[2] & ~XCP_RES_STIM) == 0))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3302      	adds	r3, #2
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	dd08      	ble.n	8004308 <XcpCmdGetSeed+0x9c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3302      	adds	r3, #2
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	f023 0308 	bic.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <XcpCmdGetSeed+0x9c>
    {
      resourceOK = 1;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
    }

    /* now process the resource validation */
    if (resourceOK == 0)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <XcpCmdGetSeed+0xaa>
    {
      XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800430e:	2022      	movs	r0, #34	; 0x22
 8004310:	f7ff fda6 	bl	8003e60 <XcpSetCtoError>
      return;
 8004314:	e07b      	b.n	800440e <XcpCmdGetSeed+0x1a2>
    }

    /* check if the resource is already unlocked */
    if ((xcpInfo.protection & data[2]) == 0)
 8004316:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <XcpCmdGetSeed+0x1a8>)
 8004318:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3302      	adds	r3, #2
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	4013      	ands	r3, r2
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d107      	bne.n	800433a <XcpCmdGetSeed+0xce>
    {
      /* set the seed length to 0 to indicate that the resource is already unlocked */
      xcpInfo.ctoData[1] = 0;
 800432a:	4b3a      	ldr	r3, [pc, #232]	; (8004414 <XcpCmdGetSeed+0x1a8>)
 800432c:	2200      	movs	r2, #0
 800432e:	705a      	strb	r2, [r3, #1]
      /* set packet length */
      xcpInfo.ctoLen = 2;
 8004330:	4b38      	ldr	r3, [pc, #224]	; (8004414 <XcpCmdGetSeed+0x1a8>)
 8004332:	2202      	movs	r2, #2
 8004334:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      /* no need to continue processing */
      return;
 8004338:	e069      	b.n	800440e <XcpCmdGetSeed+0x1a2>
    }

    /* store resource for which the seed/key sequence is started */
    xcpInfo.s_n_k_resource = data[2];
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	789a      	ldrb	r2, [r3, #2]
 800433e:	4b35      	ldr	r3, [pc, #212]	; (8004414 <XcpCmdGetSeed+0x1a8>)
 8004340:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  }

  /* process the mode flag. 0 is first part of the seed, 1 is remainder of the seed */
  if (data[1] == 0)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3301      	adds	r3, #1
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d11a      	bne.n	8004384 <XcpCmdGetSeed+0x118>
  {
    /* set flag that a seed reading sequence is now in progress */
    sequenceInProgress = BLT_TRUE;
 800434e:	4b32      	ldr	r3, [pc, #200]	; (8004418 <XcpCmdGetSeed+0x1ac>)
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
    /* obtain the seed and store it in the buffer */
    seedRemainderLen = XcpGetSeed(xcpInfo.s_n_k_resource, seedBuffer);
 8004354:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <XcpCmdGetSeed+0x1a8>)
 8004356:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800435a:	4930      	ldr	r1, [pc, #192]	; (800441c <XcpCmdGetSeed+0x1b0>)
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fd46 	bl	8003dee <XcpGetSeed>
 8004362:	4603      	mov	r3, r0
 8004364:	461a      	mov	r2, r3
 8004366:	4b2e      	ldr	r3, [pc, #184]	; (8004420 <XcpCmdGetSeed+0x1b4>)
 8004368:	701a      	strb	r2, [r3, #0]
    /* protect against buffer overrun */
    ASSERT_RT(seedRemainderLen <= XCP_SEED_MAX_LEN);
 800436a:	4b2d      	ldr	r3, [pc, #180]	; (8004420 <XcpCmdGetSeed+0x1b4>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b40      	cmp	r3, #64	; 0x40
 8004370:	d904      	bls.n	800437c <XcpCmdGetSeed+0x110>
 8004372:	f240 4121 	movw	r1, #1057	; 0x421
 8004376:	482b      	ldr	r0, [pc, #172]	; (8004424 <XcpCmdGetSeed+0x1b8>)
 8004378:	f7ff fab3 	bl	80038e2 <AssertFailure>
    /* set seed pointer */
    seedCurrentPtr = &seedBuffer[0];
 800437c:	4b2a      	ldr	r3, [pc, #168]	; (8004428 <XcpCmdGetSeed+0x1bc>)
 800437e:	4a27      	ldr	r2, [pc, #156]	; (800441c <XcpCmdGetSeed+0x1b0>)
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	e00b      	b.n	800439c <XcpCmdGetSeed+0x130>
  }
  /* seed remainder is requested */
  else
  {
    /* this is only allowed if a sequence is in progress */
    if (sequenceInProgress == BLT_FALSE)
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <XcpCmdGetSeed+0x1ac>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d107      	bne.n	800439c <XcpCmdGetSeed+0x130>
    {
      /* invalid sequence */
      XcpSetCtoError(XCP_ERR_SEQUENCE);
 800438c:	2029      	movs	r0, #41	; 0x29
 800438e:	f7ff fd67 	bl	8003e60 <XcpSetCtoError>
      /* reset seed/key resource variable for possible next unlock */
      xcpInfo.s_n_k_resource = 0;
 8004392:	4b20      	ldr	r3, [pc, #128]	; (8004414 <XcpCmdGetSeed+0x1a8>)
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
      return;
 800439a:	e038      	b.n	800440e <XcpCmdGetSeed+0x1a2>
    }
  }
  /* determine number of seed bytes that fit in the first response */
  seedCurrentLen = seedRemainderLen;
 800439c:	4b20      	ldr	r3, [pc, #128]	; (8004420 <XcpCmdGetSeed+0x1b4>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	73bb      	strb	r3, [r7, #14]
  if (seedCurrentLen > (XCP_DTO_PACKET_LEN-2))
 80043a2:	f7ff fb7d 	bl	8003aa0 <ComGetActiveInterfaceMaxTxLen>
 80043a6:	4603      	mov	r3, r0
 80043a8:	1e5a      	subs	r2, r3, #1
 80043aa:	7bbb      	ldrb	r3, [r7, #14]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	dc05      	bgt.n	80043bc <XcpCmdGetSeed+0x150>
  {
    seedCurrentLen = XCP_DTO_PACKET_LEN-2;
 80043b0:	f7ff fb76 	bl	8003aa0 <ComGetActiveInterfaceMaxTxLen>
 80043b4:	4603      	mov	r3, r0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	3b02      	subs	r3, #2
 80043ba:	73bb      	strb	r3, [r7, #14]
  }
  /* store the first part of the seed in the response */
  CpuMemCopy((blt_addr)(&xcpInfo.ctoData[2]), (blt_addr)seedCurrentPtr, seedCurrentLen);
 80043bc:	481b      	ldr	r0, [pc, #108]	; (800442c <XcpCmdGetSeed+0x1c0>)
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <XcpCmdGetSeed+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4619      	mov	r1, r3
 80043c4:	7bbb      	ldrb	r3, [r7, #14]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	461a      	mov	r2, r3
 80043ca:	f7fe fd07 	bl	8002ddc <CpuMemCopy>
  xcpInfo.ctoData[1] = seedRemainderLen;
 80043ce:	4b14      	ldr	r3, [pc, #80]	; (8004420 <XcpCmdGetSeed+0x1b4>)
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	4b10      	ldr	r3, [pc, #64]	; (8004414 <XcpCmdGetSeed+0x1a8>)
 80043d4:	705a      	strb	r2, [r3, #1]
  /* update control variables */
  seedRemainderLen -= seedCurrentLen;
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <XcpCmdGetSeed+0x1b4>)
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	7bbb      	ldrb	r3, [r7, #14]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <XcpCmdGetSeed+0x1b4>)
 80043e2:	701a      	strb	r2, [r3, #0]
  seedCurrentPtr += seedCurrentLen;
 80043e4:	4b10      	ldr	r3, [pc, #64]	; (8004428 <XcpCmdGetSeed+0x1bc>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	7bbb      	ldrb	r3, [r7, #14]
 80043ea:	4413      	add	r3, r2
 80043ec:	4a0e      	ldr	r2, [pc, #56]	; (8004428 <XcpCmdGetSeed+0x1bc>)
 80043ee:	6013      	str	r3, [r2, #0]
  /* reset sequence flag at the end of the sequence */
  if (seedRemainderLen == 0)
 80043f0:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <XcpCmdGetSeed+0x1b4>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <XcpCmdGetSeed+0x192>
  {
    sequenceInProgress = BLT_FALSE;
 80043f8:	4b07      	ldr	r3, [pc, #28]	; (8004418 <XcpCmdGetSeed+0x1ac>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
  }
  /* set packet length */
  xcpInfo.ctoLen = seedCurrentLen + 2;
 80043fe:	7bbb      	ldrb	r3, [r7, #14]
 8004400:	b29b      	uxth	r3, r3
 8004402:	3302      	adds	r3, #2
 8004404:	b29b      	uxth	r3, r3
 8004406:	b21a      	sxth	r2, r3
 8004408:	4b02      	ldr	r3, [pc, #8]	; (8004414 <XcpCmdGetSeed+0x1a8>)
 800440a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdGetSeed ***/
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	200005cc 	.word	0x200005cc
 8004418:	20000658 	.word	0x20000658
 800441c:	2000065c 	.word	0x2000065c
 8004420:	2000069c 	.word	0x2000069c
 8004424:	08004880 	.word	0x08004880
 8004428:	200006a0 	.word	0x200006a0
 800442c:	200005ce 	.word	0x200005ce

08004430 <XcpCmdUnlock>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUnlock(blt_int8u *data)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  static blt_int8u *keyCurrentPtr;
  static blt_int8u keyReceivedLen = 0;
  blt_int8u keyCurrentLen;

  /* verify that the key will actually fit in the buffer */
  if (data[1] > XCP_KEY_MAX_LEN)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3301      	adds	r3, #1
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d90a      	bls.n	8004458 <XcpCmdUnlock+0x28>
  {
    /* reset previous remainder for the next loop iteration */
    keyPreviousRemainder = 0;
 8004442:	4b47      	ldr	r3, [pc, #284]	; (8004560 <XcpCmdUnlock+0x130>)
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
    /* key is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8004448:	2022      	movs	r0, #34	; 0x22
 800444a:	f7ff fd09 	bl	8003e60 <XcpSetCtoError>
    /* reset seed/key resource variable for possible next unlock */
    xcpInfo.s_n_k_resource = 0;
 800444e:	4b45      	ldr	r3, [pc, #276]	; (8004564 <XcpCmdUnlock+0x134>)
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    return;
 8004456:	e07f      	b.n	8004558 <XcpCmdUnlock+0x128>
  /* is this the start of a key reception? the first unlock message contains the total
   * length of the key and subsequent messages the remainder length. if the received
   * length is >= than the previously received remainder, it must be the reception
   * start of a new key.
   */
  if (data[1] >= keyPreviousRemainder)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3301      	adds	r3, #1
 800445c:	781a      	ldrb	r2, [r3, #0]
 800445e:	4b40      	ldr	r3, [pc, #256]	; (8004560 <XcpCmdUnlock+0x130>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d309      	bcc.n	800447a <XcpCmdUnlock+0x4a>
  {
    /* store the total length of the key */
    keyTotalLen = data[1];
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	785a      	ldrb	r2, [r3, #1]
 800446a:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <XcpCmdUnlock+0x138>)
 800446c:	701a      	strb	r2, [r3, #0]
    /* initialize pointer to key reception buffer */
    keyCurrentPtr = &keyBuffer[0];
 800446e:	4b3f      	ldr	r3, [pc, #252]	; (800456c <XcpCmdUnlock+0x13c>)
 8004470:	4a3f      	ldr	r2, [pc, #252]	; (8004570 <XcpCmdUnlock+0x140>)
 8004472:	601a      	str	r2, [r3, #0]
    /* reset number of received key bytes */
    keyReceivedLen = 0;
 8004474:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <XcpCmdUnlock+0x144>)
 8004476:	2200      	movs	r2, #0
 8004478:	701a      	strb	r2, [r3, #0]

  }
  /* store length / remainder for checking during the next iteration */
  keyPreviousRemainder = data[1];
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	785a      	ldrb	r2, [r3, #1]
 800447e:	4b38      	ldr	r3, [pc, #224]	; (8004560 <XcpCmdUnlock+0x130>)
 8004480:	701a      	strb	r2, [r3, #0]
  /* determine how many key bytes were received */
  keyCurrentLen = data[1];
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	73fb      	strb	r3, [r7, #15]
  if (keyCurrentLen > (XCP_CTO_PACKET_LEN-2))
 8004488:	f7ff fae0 	bl	8003a4c <ComGetActiveInterfaceMaxRxLen>
 800448c:	4603      	mov	r3, r0
 800448e:	1e5a      	subs	r2, r3, #1
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	429a      	cmp	r2, r3
 8004494:	dc05      	bgt.n	80044a2 <XcpCmdUnlock+0x72>
  {
    keyCurrentLen = XCP_CTO_PACKET_LEN-2;
 8004496:	f7ff fad9 	bl	8003a4c <ComGetActiveInterfaceMaxRxLen>
 800449a:	4603      	mov	r3, r0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	3b02      	subs	r3, #2
 80044a0:	73fb      	strb	r3, [r7, #15]
  }
  /* store the received key bytes to the buffer */
  CpuMemCopy((blt_addr)keyCurrentPtr, (blt_addr)(&data[2]), keyCurrentLen);
 80044a2:	4b32      	ldr	r3, [pc, #200]	; (800456c <XcpCmdUnlock+0x13c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3302      	adds	r3, #2
 80044ac:	4619      	mov	r1, r3
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	f7fe fc92 	bl	8002ddc <CpuMemCopy>
  /* update control variables */
  keyCurrentPtr += keyCurrentLen;
 80044b8:	4b2c      	ldr	r3, [pc, #176]	; (800456c <XcpCmdUnlock+0x13c>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	4413      	add	r3, r2
 80044c0:	4a2a      	ldr	r2, [pc, #168]	; (800456c <XcpCmdUnlock+0x13c>)
 80044c2:	6013      	str	r3, [r2, #0]
  keyReceivedLen += keyCurrentLen;
 80044c4:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <XcpCmdUnlock+0x144>)
 80044c6:	781a      	ldrb	r2, [r3, #0]
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	4413      	add	r3, r2
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4b29      	ldr	r3, [pc, #164]	; (8004574 <XcpCmdUnlock+0x144>)
 80044d0:	701a      	strb	r2, [r3, #0]
  /* check if the entire key was received */
  if (keyReceivedLen >= keyTotalLen)
 80044d2:	4b28      	ldr	r3, [pc, #160]	; (8004574 <XcpCmdUnlock+0x144>)
 80044d4:	781a      	ldrb	r2, [r3, #0]
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <XcpCmdUnlock+0x138>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d330      	bcc.n	8004540 <XcpCmdUnlock+0x110>
  {
    /* reset previous remainder for the next loop iteration */
    keyPreviousRemainder = 0;
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <XcpCmdUnlock+0x130>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
    /* verify the key */
    if (XcpVerifyKey(xcpInfo.s_n_k_resource, keyBuffer, keyTotalLen) == 0)
 80044e4:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <XcpCmdUnlock+0x134>)
 80044e6:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80044ea:	4a1f      	ldr	r2, [pc, #124]	; (8004568 <XcpCmdUnlock+0x138>)
 80044ec:	7812      	ldrb	r2, [r2, #0]
 80044ee:	4920      	ldr	r1, [pc, #128]	; (8004570 <XcpCmdUnlock+0x140>)
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fc8c 	bl	8003e0e <XcpVerifyKey>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10d      	bne.n	8004518 <XcpCmdUnlock+0xe8>
    {
      /* invalid key so inform the master and do a disconnect */
      XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 80044fc:	2025      	movs	r0, #37	; 0x25
 80044fe:	f7ff fcaf 	bl	8003e60 <XcpSetCtoError>
      /* indicate that the xcp connection is disconnected */
      xcpInfo.connected = 0;
 8004502:	4b18      	ldr	r3, [pc, #96]	; (8004564 <XcpCmdUnlock+0x134>)
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      /* reset seed/key resource variable for possible next unlock */
      xcpInfo.s_n_k_resource = 0;
 800450a:	4b16      	ldr	r3, [pc, #88]	; (8004564 <XcpCmdUnlock+0x134>)
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
      /* enable resource protection */
      XcpProtectResources();
 8004512:	f7ff fc8f 	bl	8003e34 <XcpProtectResources>
      return;
 8004516:	e01f      	b.n	8004558 <XcpCmdUnlock+0x128>
    }
    /* key correct so unlock the resource */
    xcpInfo.protection &= ~xcpInfo.s_n_k_resource;
 8004518:	4b12      	ldr	r3, [pc, #72]	; (8004564 <XcpCmdUnlock+0x134>)
 800451a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800451e:	b25a      	sxtb	r2, r3
 8004520:	4b10      	ldr	r3, [pc, #64]	; (8004564 <XcpCmdUnlock+0x134>)
 8004522:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8004526:	b25b      	sxtb	r3, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	b25b      	sxtb	r3, r3
 800452c:	4013      	ands	r3, r2
 800452e:	b25b      	sxtb	r3, r3
 8004530:	b2da      	uxtb	r2, r3
 8004532:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <XcpCmdUnlock+0x134>)
 8004534:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    /* reset seed/key resource variable for possible next unlock */
    xcpInfo.s_n_k_resource = 0;
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <XcpCmdUnlock+0x134>)
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004540:	4b08      	ldr	r3, [pc, #32]	; (8004564 <XcpCmdUnlock+0x134>)
 8004542:	22ff      	movs	r2, #255	; 0xff
 8004544:	701a      	strb	r2, [r3, #0]
  /* report the current resource protection */
  xcpInfo.ctoData[1] = xcpInfo.protection;
 8004546:	4b07      	ldr	r3, [pc, #28]	; (8004564 <XcpCmdUnlock+0x134>)
 8004548:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <XcpCmdUnlock+0x134>)
 800454e:	705a      	strb	r2, [r3, #1]
  /* set packet length */
  xcpInfo.ctoLen = 2;
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <XcpCmdUnlock+0x134>)
 8004552:	2202      	movs	r2, #2
 8004554:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdUnlock ***/
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	200006a4 	.word	0x200006a4
 8004564:	200005cc 	.word	0x200005cc
 8004568:	200006a5 	.word	0x200006a5
 800456c:	200006a8 	.word	0x200006a8
 8004570:	200006ac 	.word	0x200006ac
 8004574:	200006ec 	.word	0x200006ec

08004578 <XcpCmdProgramStart>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramStart(blt_int8u *data)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

#if (XCP_SEED_KEY_PROTECTION_EN == 1)
  /* check if PGM resource is unlocked */
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004580:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <XcpCmdProgramStart+0x5c>)
 8004582:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <XcpCmdProgramStart+0x1e>
  {
    /* resource is locked. use seed/key sequence to unlock */
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 800458e:	2025      	movs	r0, #37	; 0x25
 8004590:	f7ff fc66 	bl	8003e60 <XcpSetCtoError>
    return;
 8004594:	e01b      	b.n	80045ce <XcpCmdProgramStart+0x56>
  }
#endif

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004596:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <XcpCmdProgramStart+0x5c>)
 8004598:	22ff      	movs	r2, #255	; 0xff
 800459a:	701a      	strb	r2, [r3, #0]

  /* initialize reserved parameter */
  xcpInfo.ctoData[1] = 0;
 800459c:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <XcpCmdProgramStart+0x5c>)
 800459e:	2200      	movs	r2, #0
 80045a0:	705a      	strb	r2, [r3, #1]

  /* no special communication mode supported during programming */
  xcpInfo.ctoData[2] = 0;
 80045a2:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <XcpCmdProgramStart+0x5c>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	709a      	strb	r2, [r3, #2]

  /* cto packet length stays the same during programming */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 80045a8:	f7ff fa50 	bl	8003a4c <ComGetActiveInterfaceMaxRxLen>
 80045ac:	4603      	mov	r3, r0
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <XcpCmdProgramStart+0x5c>)
 80045b2:	70da      	strb	r2, [r3, #3]

  /* no block size, st-min time, or queue size supported */
  xcpInfo.ctoData[4] = 0;
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <XcpCmdProgramStart+0x5c>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <XcpCmdProgramStart+0x5c>)
 80045bc:	2200      	movs	r2, #0
 80045be:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[6] = 0;
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <XcpCmdProgramStart+0x5c>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	719a      	strb	r2, [r3, #6]

  /* set packet length */
  xcpInfo.ctoLen = 7;
 80045c6:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <XcpCmdProgramStart+0x5c>)
 80045c8:	2207      	movs	r2, #7
 80045ca:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramStart ***/
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	200005cc 	.word	0x200005cc

080045d8 <XcpCmdProgramMax>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramMax(blt_int8u *data)
{
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
#if (XCP_SEED_KEY_PROTECTION_EN == 1)
  /* check if PGM resource is unlocked */
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <XcpCmdProgramMax+0x74>)
 80045e2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <XcpCmdProgramMax+0x1e>
  {
    /* resource is locked. use seed/key sequence to unlock */
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 80045ee:	2025      	movs	r0, #37	; 0x25
 80045f0:	f7ff fc36 	bl	8003e60 <XcpSetCtoError>
    return;
 80045f4:	e026      	b.n	8004644 <XcpCmdProgramMax+0x6c>
  }
#endif

  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <XcpCmdProgramMax+0x74>)
 80045f8:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80045fc:	f7ff fa26 	bl	8003a4c <ComGetActiveInterfaceMaxRxLen>
 8004600:	4603      	mov	r3, r0
 8004602:	3b01      	subs	r3, #1
 8004604:	4619      	mov	r1, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3301      	adds	r3, #1
 800460a:	461a      	mov	r2, r3
 800460c:	4620      	mov	r0, r4
 800460e:	f7fe ff85 	bl	800351c <NvmWrite>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d103      	bne.n	8004620 <XcpCmdProgramMax+0x48>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8004618:	2031      	movs	r0, #49	; 0x31
 800461a:	f7ff fc21 	bl	8003e60 <XcpSetCtoError>
    return;
 800461e:	e011      	b.n	8004644 <XcpCmdProgramMax+0x6c>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <XcpCmdProgramMax+0x74>)
 8004622:	22ff      	movs	r2, #255	; 0xff
 8004624:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8004626:	f7ff fa11 	bl	8003a4c <ComGetActiveInterfaceMaxRxLen>
 800462a:	4603      	mov	r3, r0
 800462c:	1e5a      	subs	r2, r3, #1
 800462e:	4b07      	ldr	r3, [pc, #28]	; (800464c <XcpCmdProgramMax+0x74>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	4413      	add	r3, r2
 8004636:	4a05      	ldr	r2, [pc, #20]	; (800464c <XcpCmdProgramMax+0x74>)
 8004638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <XcpCmdProgramMax+0x74>)
 800463e:	2201      	movs	r2, #1
 8004640:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramMax ***/
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	bd90      	pop	{r4, r7, pc}
 800464a:	bf00      	nop
 800464c:	200005cc 	.word	0x200005cc

08004650 <XcpCmdProgram>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgram(blt_int8u *data)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
#if (XCP_SEED_KEY_PROTECTION_EN == 1)
  /* check if PGM resource is unlocked */
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004658:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <XcpCmdProgram+0xa8>)
 800465a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <XcpCmdProgram+0x1e>
  {
    /* resource is locked. use seed/key sequence to unlock */
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8004666:	2025      	movs	r0, #37	; 0x25
 8004668:	f7ff fbfa 	bl	8003e60 <XcpSetCtoError>
    return;
 800466c:	e040      	b.n	80046f0 <XcpCmdProgram+0xa0>
  }
#endif

  /* validate length of download request */
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 800466e:	f7ff f9ed 	bl	8003a4c <ComGetActiveInterfaceMaxRxLen>
 8004672:	4603      	mov	r3, r0
 8004674:	3b01      	subs	r3, #1
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	3201      	adds	r2, #1
 800467a:	7812      	ldrb	r2, [r2, #0]
 800467c:	4293      	cmp	r3, r2
 800467e:	dc03      	bgt.n	8004688 <XcpCmdProgram+0x38>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8004680:	2022      	movs	r0, #34	; 0x22
 8004682:	f7ff fbed 	bl	8003e60 <XcpSetCtoError>
    return;
 8004686:	e033      	b.n	80046f0 <XcpCmdProgram+0xa0>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004688:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <XcpCmdProgram+0xa8>)
 800468a:	22ff      	movs	r2, #255	; 0xff
 800468c:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800468e:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <XcpCmdProgram+0xa8>)
 8004690:	2201      	movs	r2, #1
 8004692:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

  /* end of programming sequence (datasize is 0)? */
  if (data[1] == 0)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3301      	adds	r3, #1
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d108      	bne.n	80046b2 <XcpCmdProgram+0x62>
  {
    /* call erase/programming cleanup routine */
    if (NvmDone() == BLT_FALSE)
 80046a0:	f7fe ff68 	bl	8003574 <NvmDone>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d121      	bne.n	80046ee <XcpCmdProgram+0x9e>
    {
      /* error occurred while finishing up programming */
      XcpSetCtoError(XCP_ERR_GENERIC);
 80046aa:	2031      	movs	r0, #49	; 0x31
 80046ac:	f7ff fbd8 	bl	8003e60 <XcpSetCtoError>
    }
    return;
 80046b0:	e01d      	b.n	80046ee <XcpCmdProgram+0x9e>
  }
  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 80046b2:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <XcpCmdProgram+0xa8>)
 80046b4:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3301      	adds	r3, #1
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	4619      	mov	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3302      	adds	r3, #2
 80046c4:	461a      	mov	r2, r3
 80046c6:	f7fe ff29 	bl	800351c <NvmWrite>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d103      	bne.n	80046d8 <XcpCmdProgram+0x88>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 80046d0:	2031      	movs	r0, #49	; 0x31
 80046d2:	f7ff fbc5 	bl	8003e60 <XcpSetCtoError>
    return;
 80046d6:	e00b      	b.n	80046f0 <XcpCmdProgram+0xa0>
  }

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <XcpCmdProgram+0xa8>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	3201      	adds	r2, #1
 80046e2:	7812      	ldrb	r2, [r2, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	4a04      	ldr	r2, [pc, #16]	; (80046f8 <XcpCmdProgram+0xa8>)
 80046e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80046ec:	e000      	b.n	80046f0 <XcpCmdProgram+0xa0>
    return;
 80046ee:	bf00      	nop
} /*** end of XcpCmdProgram ***/
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200005cc 	.word	0x200005cc

080046fc <XcpCmdProgramClear>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramClear(blt_int8u *data)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  blt_int32u eraseLen;
  blt_addr   eraseAddr;
  
#if (XCP_SEED_KEY_PROTECTION_EN == 1)
  /* check if PGM resource is unlocked */
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004704:	4b14      	ldr	r3, [pc, #80]	; (8004758 <XcpCmdProgramClear+0x5c>)
 8004706:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <XcpCmdProgramClear+0x1e>
  {
    /* resource is locked. use seed/key sequence to unlock */
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8004712:	2025      	movs	r0, #37	; 0x25
 8004714:	f7ff fba4 	bl	8003e60 <XcpSetCtoError>
    return;
 8004718:	e01b      	b.n	8004752 <XcpCmdProgramClear+0x56>
  }
#endif

  /* erase the memory */
  eraseAddr = xcpInfo.mta;
 800471a:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <XcpCmdProgramClear+0x5c>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004720:	60fb      	str	r3, [r7, #12]
  eraseLen = XcpGetOrderedLong(&data[4]);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fbb2 	bl	8003e90 <XcpGetOrderedLong>
 800472c:	60b8      	str	r0, [r7, #8]
  if (NvmErase(eraseAddr, eraseLen) == BLT_FALSE)
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7fe ff03 	bl	800353c <NvmErase>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d103      	bne.n	8004744 <XcpCmdProgramClear+0x48>
  {
    /* error occurred during erasure */
    XcpSetCtoError(XCP_ERR_GENERIC);
 800473c:	2031      	movs	r0, #49	; 0x31
 800473e:	f7ff fb8f 	bl	8003e60 <XcpSetCtoError>
    return;
 8004742:	e006      	b.n	8004752 <XcpCmdProgramClear+0x56>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <XcpCmdProgramClear+0x5c>)
 8004746:	22ff      	movs	r2, #255	; 0xff
 8004748:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800474a:	4b03      	ldr	r3, [pc, #12]	; (8004758 <XcpCmdProgramClear+0x5c>)
 800474c:	2201      	movs	r2, #1
 800474e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramClear ***/
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	200005cc 	.word	0x200005cc

0800475c <XcpCmdProgramReset>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramReset(blt_int8u *data)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

#if (XCP_SEED_KEY_PROTECTION_EN == 1)
  /* check if PGM resource is unlocked */
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004764:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <XcpCmdProgramReset+0x38>)
 8004766:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <XcpCmdProgramReset+0x1e>
  {
    /* resource is locked. use seed/key sequence to unlock */
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8004772:	2025      	movs	r0, #37	; 0x25
 8004774:	f7ff fb74 	bl	8003e60 <XcpSetCtoError>
    return;
 8004778:	e008      	b.n	800478c <XcpCmdProgramReset+0x30>
#endif

  /* reset the ecu after programming is done. so basically, just start the newly programmed
   * firmware. it is okay if the code does not return here. 
   */
  CpuStartUserProgram();
 800477a:	f7fe faff 	bl	8002d7c <CpuStartUserProgram>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <XcpCmdProgramReset+0x38>)
 8004780:	22ff      	movs	r2, #255	; 0xff
 8004782:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <XcpCmdProgramReset+0x38>)
 8004786:	2201      	movs	r2, #1
 8004788:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramReset ***/
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	200005cc 	.word	0x200005cc

08004798 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
#if (XCP_SEED_KEY_PROTECTION_EN == 1)
  /* check if PGM resource is unlocked */
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 80047a0:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <XcpCmdProgramPrepare+0x2c>)
 80047a2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <XcpCmdProgramPrepare+0x1e>
  {
    /* resource is locked. use seed/key sequence to unlock */
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 80047ae:	2025      	movs	r0, #37	; 0x25
 80047b0:	f7ff fb56 	bl	8003e60 <XcpSetCtoError>
    return;
 80047b4:	e003      	b.n	80047be <XcpCmdProgramPrepare+0x26>
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 80047b6:	2031      	movs	r0, #49	; 0x31
 80047b8:	f7ff fb52 	bl	8003e60 <XcpSetCtoError>
  return;
 80047bc:	bf00      	nop
} /*** end of XcpCmdProgramPrepare ***/
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	200005cc 	.word	0x200005cc

080047c8 <memset>:
 80047c8:	4402      	add	r2, r0
 80047ca:	4603      	mov	r3, r0
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d100      	bne.n	80047d2 <memset+0xa>
 80047d0:	4770      	bx	lr
 80047d2:	f803 1b01 	strb.w	r1, [r3], #1
 80047d6:	e7f9      	b.n	80047cc <memset+0x4>

080047d8 <__libc_init_array>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	4d0d      	ldr	r5, [pc, #52]	; (8004810 <__libc_init_array+0x38>)
 80047dc:	4c0d      	ldr	r4, [pc, #52]	; (8004814 <__libc_init_array+0x3c>)
 80047de:	1b64      	subs	r4, r4, r5
 80047e0:	10a4      	asrs	r4, r4, #2
 80047e2:	2600      	movs	r6, #0
 80047e4:	42a6      	cmp	r6, r4
 80047e6:	d109      	bne.n	80047fc <__libc_init_array+0x24>
 80047e8:	4d0b      	ldr	r5, [pc, #44]	; (8004818 <__libc_init_array+0x40>)
 80047ea:	4c0c      	ldr	r4, [pc, #48]	; (800481c <__libc_init_array+0x44>)
 80047ec:	f000 f818 	bl	8004820 <_init>
 80047f0:	1b64      	subs	r4, r4, r5
 80047f2:	10a4      	asrs	r4, r4, #2
 80047f4:	2600      	movs	r6, #0
 80047f6:	42a6      	cmp	r6, r4
 80047f8:	d105      	bne.n	8004806 <__libc_init_array+0x2e>
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004800:	4798      	blx	r3
 8004802:	3601      	adds	r6, #1
 8004804:	e7ee      	b.n	80047e4 <__libc_init_array+0xc>
 8004806:	f855 3b04 	ldr.w	r3, [r5], #4
 800480a:	4798      	blx	r3
 800480c:	3601      	adds	r6, #1
 800480e:	e7f2      	b.n	80047f6 <__libc_init_array+0x1e>
 8004810:	08004930 	.word	0x08004930
 8004814:	08004930 	.word	0x08004930
 8004818:	08004930 	.word	0x08004930
 800481c:	08004934 	.word	0x08004934

08004820 <_init>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	bf00      	nop
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr

0800482c <_fini>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr
